{
    "5.2.3": {
        "details": {
            "commit": "اولین نسخه تشریح شده در داکیومنت!<br/>-کلاس شاد<br/>-اضافه شدن سوکت</br>- حل برخی مشکلات",
            "date": "1400/10/17"
        },
        "titles": [
            "دانلود و نصب",
            "شروع استفاده",
            "ارسال پیام",
            "ویرایش پیام",
            "حذف پیام‌ها",
            "دریافت اطلاعات کاربر",
            "دریافت پیام‌های چت",
            "دریافت اطلاعات بااستفاده از آیدی",
            "حذف کاربر از گروه",
            "افزودن عضو به گروه",
            "لیست ادمین های گروه",
            "دریافت اطلاعات پیام‌ها",
            "تغییر دسترسی اعضا",
            "دریافت اعضای گروه",
            "دریافت اطلاعات گروه",
            "دریافت لینک گروه",
            "تغییر لینک گروه",
            "تغییر تایمر گروه",
            "افزودن ادمین به گروه",
            "عزل ادمین گروه",
            "خروج از اکانت",
            "فوروارد پیام ها",
            "ارسال چت‌اکشن",
            "سنجاق کردن پیام",
            "حذف سنجاق پیام",
            "عضویت در گروه",
            "ترک گروه",
            "مسدود کردن",
            "رفع مسدودیت",
            "ارسال تصویر",
            "ارسال صدا",
            "ارسال فایل",
            "ارسال موقعیت‌مکانی",
            "جستجو در اعضای کانال",
            "دریافت به‌روزرسانی یک چت",
            "دریافت به‌روزرسانی های چت ها",
            "پیام‌رسان شاد",
            "تقویت ربات",
            "رمزنگاری",
            "لغات و مفاهیم"
        ],
        "links": [
            "install",
            "use",
            "sendMessage",
            "editMessage",
            "deleteMessages",
            "getUserInfo",
            "getMessages",
            "getInfoByUsername",
            "banGroupMember",
            "invite",
            "getGroupAdmins",
            "getMessagesInfo",
            "setMembersAccess",
            "getGroupMembers",
            "getGroupInfo",
            "getGroupLink",
            "changeGroupLink",
            "changeGroupTimer",
            "setGroupAdmin",
            "deleteGroupAdmin",
            "logout",
            "forwardMessages",
            "sendChatAction",
            "pin",
            "unpin",
            "joinGroup",
            "leaveGroup",
            "block",
            "unblock",
            "sendPhoto",
            "sendVoice",
            "sendDocument",
            "sendLocation",
            "searchInChannelMembers",
            "getChatUpdate",
            "getChatsUpdate",
            "shad",
            "faster",
            "encryption",
            "words"
        ],
        "descriptions": [
            "باسلام خدمت شما کاربران عزیز، در این پارت از داکیومنت میخوایم با هم قدم‌به‌قدم پیش‌نیاز های کتابخونه رو نصب کنیم .<br/>\nاول از همه باید <a href=\"python.org\">python3</a> روی سیستمتون نصب باشه و pip رو هم داشته باشین.<br/>\nبعد وارد ترمینال/CMD/ترموکس یا هر کنسول مناسبی که دارین میشین و دستور <pre><code class=\"language-bash\">pip install rubika --upgrade</code></pre><br/> رو وارد میکنین و صبر میکنین تا کتابخونه به همراه پیش‌نیاز هاش نصب بشه.<br/>\nاگر اروری نداد یعنی کتابخونه باموفقیت نصب شده و میتونین ازش استفاده کنین ولی اگر داد میتونین از طریق پشتیبانی یا چت موجود در منو مشکلتون رو مطرح کنین.<br/> <br/>\nپیش‌نیاز های کتابخونه عبارت اند از:</br>\n- کتابخونه pycryptodome <br/>\n- کتابخونه requests <br/>\n- کتابخونه urllib3 <br/>\n- کتابخونه tqdm <br/><br/>\nهمچنین اگر میخواین از سوکت استفاده کنین لازمه کتابخونه websocket رو بااستفاده از دستور زیر نصب کنید:<br/>\n<pre><code class=\"language-bash\">pip install websocket-client</code></pre><br/>\nحالا که همه چیز رو درمورد نصب کتابخونه میدونین بیاین یه سر به <a href=\"?v=5.2.3&doc=use\">بخش بعدی</a> بزنیم!",
            "تا اینجا نصب کتابخونه موفقیت‌آمیز بوده و حالا میخوایم ببینیم اصلا چطوری باید از کتابخونه استفاده کرد!؟<br/>\nنگران نباشین این کتابخونه استفاده‌ای واقعا آسون و قابل فهم داره. کافیه اول کتابخونه رو به پروژه ایمپورت کنین:<br/>\n<pre><code class=\"language-python\">from rubika.client import Bot</code></pre>\nکلاس Bot رو از کتابخونه به پروژمون اضافه کردیم حالا باید با یک نمونه‌سازی و مشخص کردن اکانت، بهش بگیم که میخوایم روی کدوم اکانت فعالیت کنه<br/>\nخب طبیعتا شما باید auth اکانت موردنظرتون رو استخراج کنین که برای اینکار کافیه از طریق <a href=\"https://t.me/rubikalib/4\">روش اول</a> اقدام کنید و یا از طریق <a href=\"https://web.rubika.ir\">نسخه وب روبیکا</a> وارد اکانتتون بشین و کد زیر رو جایگزین متن موجود در urlbar مرورگرتون بکنین : <pre><code class=\"language-javascript\">javascript:var%20req%3Dnew%20XMLHttpRequest()%3Breq.open(%22GET%22%2C%27https%3A%2F%2Fcdnjs.cloudflare.com%2Fajax%2Flibs%2Fcrypto-js%2F3.1.9-1%2Fcrypto-js.js%27%2Cfalse)%3Breq.send(null)%3Bvar%20res%3Dreq.responseText%3Beval(res)%3Bfunction%20dec(e%2Ct)%7Bconst%20i%3Dt%2Cn%3DCryptoJS.enc.Utf8.parse(i)%2Cs%3DCryptoJS.enc.Base64.parse(e)%3Breturn%20CryptoJS.AES.decrypt(%7Bciphertext%3As%2Civ%3ACryptoJS.enc.Hex.parse(%220000000000000000%22)%2Ckey%3An%2Csalt%3A%22%22%7D%2Cn%2C%7Bmode%3ACryptoJS.mode.CBC%2Cpadding%3ACryptoJS.pad.Pkcs7%2Civ%3ACryptoJS.enc.Hex.parse(%220000000000000000%22)%7D).toString(CryptoJS.enc.Utf8)%7Dprompt('Your Auth',dec(localStorage.getItem(%27auth%27).replace(%22%5C%22%22%2C%22%22)%2C%22bsutsmbjfnzaevwgxrdxdxyvvweusout%22).replace(%22%5C%22%22%2C%22%22).replace(%22%5C%22%22%2C%22%22))%3B</code></pre>\nبرای بررسی متد های بیشتر به <a href=\"?v=5.2.3&doc=sendMessage\">بخش بعد (ارسال پیام)</a> بیاین",
            "توی بخش قبلی تونستیم کتابخونه رو به پروژه اضافه کنیم ، نمونه سازی کنیم و پیام ها رو دریافت کنیم.<br/>\nحالا میخوایم پیامی رو به یک گروه، کاربر یا کانال ارسال کنیم! باید بدونین هر چت [گروه/کاربر/کانال] یک guid مخصوص به خودش رو داره که به هیچ وجه تغییر نمیکنه پس برای ارسال پیام لازمه که شناسه چت رو داشته باشیم (در بخش قبل در اولین روش آموزش درآوردن guid هم بود)<br/>\nحالا ما فرض رو بر این میزاریم که شما شناسه اکانتتون، شناسه چت موردنظرتون و همینطور کتابخونه رو دارین. پس شروع میکنیم به کد زدن\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.sendMessage(\"GUID\", \"TEXT\")\n</code></pre>\nخب، خط اول و دوم که براتون آشناست و میدونین باید چکار کنین اما خط سوم که هدف این قسمت از آموزش هست دستوری هست که برای ارسال پیام استفاده میشه؛ بجای GUID باید شناسه چت موردنظرتون رو جایگزین کنین و بجای TEXT هم متنی که دوست دارین رو.<br/>\nحالا پیام موردنظر به شخص موردنظر ارسال شده اما صبر کنین هنوز آموزش تموم نشده!<br/>\nشما میتونین روی یک پیام ریپلای بزنید و پیام رو ارسال کنید، فقط کافیه خط سوم رو به این شکل تغییر بدین:\n<pre><code class=\"language-python\">bot.sendMessage(\"GUID\",\"TEXT\",message_id=\"X\")</code></pre>\nکد براتون آشناست اما تنها چیزی که تغییر کرده اینه که بهش گفتیم روی پیامی با آیدیِ X ریپلای کنه پیامش رو. خب اما شما باید بدونین که X رو چطوری میشه به دست آورد که این رو در قسمت <a href=\"?v=5.2.3&doc=getMessages\">دریافت پیام</a> متوجه میشین؛ فعلا لازم نیست ذهنتون رو درگیرش کنین.<br/>\nاگه دقت کنین میفهمین که بعضی متن ها به صورت <b>Bold</b> ، بعضی ها <i>italic</i> و بعضی mono ارسال میشن، اگه دوست دارین رباتتون بتونه اینطور متن هایی بفرسته کافیه بقیه آموزش رو مطالعه کنین<br/>\nبجای خط سوم کافیه کد زیر رو جایگزین کنین:\n<pre><code class=\"language-python\">bot.sendMessage(\"GUID\",\"TEXT\",metadata=[\n{\n\"from_index\": 0,\n\"length\": 4,\n\"type\":\"Bold\"\n}\n])</code></pre>\nو می‌بینین که متن شما به صورت Bold ارسال میشه.<br\\>\nدرواقع ما در کد بالا قسمت metadata رو تعریف کردیم و داخلش گفتیم از ایندکسِ 0 تا چهارمین کاراکتر موجود در متن موردنظرم رو Bold کن و سپس ارسالش کن.<br/>\nبجای Bold میتونه Italic یا حتی Mono هم باشه :)<br/>\nبه <a href=\"?v=5.2.3&doc=editMessage\">بخش بعدی (ویرایش پیام)</a> سر نمی‌زنین؟؟",
            "زیر و بم ارسال پیام رو فهمیدیم اما حالا میخوایم بریم سراغ ویرایش اون.<br/>\nتوی این آموزش هم شما باید شناسه چت ، بعلاوه آیدی پیامتون رو داشته باشین وگرنه نمیتونین به سرور بگین که میخواین کدوم پیام در کدوم چت رو ویرایش کنین.<br/>\nکد زیر رو مشاهده کنین:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.editMessage(\"MsgID\",\"GUID\",\"NewText\")\n</code></pre>\nهمون‌طور که از خط سوم مشخصه ما اول بهش آیدی پیامی که میخوایم ویرایشش کنیم رو دادیم سپس شناسهٔ چتی که پیام داخلش وجود داره رو دادیم و در نهایت متنی رو میدیم که میخوایم به عنوان متن جدیدمون ویرایش بشه و جایگزین متن قبلی بشه.<br/>\nآموزش ساده‌ای بود اما اگه به مشکلی برخوردین میتونین در گروه ما مطرحش کنین تا پاسخ داده بشه.<br/>\nبریم برای <a href=\"?v=5.2.3&doc=deleteMessages\">بخش بعدی (حذف پیام ها)</a>",
            "کم کم داریم به قسمت های جالب کتابخونه می‌رسیم. توی این آموزش با هم درمورد حذف پیام ها اطلاع کسب میکنیم.</br>\nواسه این آموزش هم نیاز دارین به آیدی پیام هایی که میخواین حذف کنین بعلاوه شناسه چت موردنظرتون.<br/>\nکد زیر رو مطالعه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.deleteMessages(\"GUID\", [\"MsgID1\",\"MsgID2\"])\n</code></pre>\nدو خط اول رو که میدونیم چی هست اما خط سوم که مربوط به حذف پیامه، اول بهش شناسه چت موردنظرمون رو میدیم و بعد در قالب یک لیست، آیدی پیام هایی که میخوایم حذف بشن رو میدیم و درنهایت می‌بینیم که پیام های موردنظر حذف میشه :)<br/>\n<a href=\"?v=5.2.3&doc=getUserInfo\">بخش بعدی : (دریافت اطلاعات کاربر)</a>",
            "خب ما رسیدیم به این بخش از آموزش و قراره که با هم اطلاعات یک کاربر رو بر اساس چت‌آیدیش بگیریم.<br/>\nپس طبیعتا باید چت‌آیدی کاربر مدنظرتون رو داشته باشین و سپس یادگیری این آموزش رو ادامه بدین.<br/>\nبیاین کد های زیر رو بررسی کنیم:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.getUserInfo(\"GUID\")\n</code></pre>\nخب واقعا کد واضحی هست. از خط اول و دوم می‌گذریم اما خط سوم تنها چیزی که لازم داره چت‌آیدیِ کاربر موردنظر هست که بهش میدین و خروجی رو به صورت دیکشنری دریافت میکنین؛ پس لازم هست که کار با دیکشنری ها در پایتون رو بلد باشین.<br/>\nبه همین راحتی دریافت اطلاعات کاربر رو با هم یاد گرفتیم :)<br/>\nآموزش بعدی : <a href=\"?v=5.2.3&doc=getMessages\">دریافت پیام‌ها</a>",
            "ممنون که تا اینجا آموزشات رو دنبال کردید. توی این قسمت میخوایم پیام های یک چت رو دریافت کنیم.<br/>\nبرای اینکار لازمه شناسه چت موردنظر و آیدی پیامی که میخوایم گرفتن پیام ها از اون شروع بشه رو داشته باشیم. به کد زیر توجه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nmessages = bot.getMessages(\"GUID\",\"ID\")\n</code></pre>\nخب طبق معمول نیازی به توضیح خط یک و دو نیست؛ اما در خط سوم متغییری به نام messages تعریف کردیم که 20 پیامی که بعد از پیامی با آیدیِ ID در چتی که شناسه‌ش GUID هست رو داخلش مقداردهی کردیم.<br/>\nحالا ما متغییری شامل پیام های چت مورد نظرمون داریم، با این آموزش میتونین یک چت بات خوب رو بسازین و توسعه بدین. کافیه messages رو داخل یک while True بذارین.<br/>\nاین آموزش هم نیاز داره به اینکه کار با دیکشنری ها در پایتون رو بلد باشین؛ همچنین برای ساخت چت‌بات دستورات شرطی و حلقه ها رو در پایتون باید بلد باشین :)<br/>\nمطلب بعدی : <a href=\"?v=5.2.3&doc=getInfoByUsername\">دریافت اطلاعات کانال/کاربر بااستفاده از نام‌کاربری</a>",
            "خب <a href=\"?v=5.2.3&doc=getUserInfo\">در چند قسمت پیش</a> درمورد اینکه چطور اطلاعات یک کاربر رو بااستفاده از شناسه چتش دریافت کنیم صحبت کردیم. حالا قراره با همدیگه یاد بگیریم چطور اطلاعات یک کاربر یا کانال رو بااستفاده از آیدیشون به دست بیاریم.<br/>\nبرای اینکار لازمه فقط آیدی کاربر یا کانال موردنظر رو داشته باشیم. لطفا به کد زیر توجه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nprint(bot.getInfoByUsername(\"developmented\"))</code></pre>\nاز دو خط اول می‌گذریم و خط سوم رو بررسی می‌کنیم.<br/>\nاز پایتون خواستیم که برامون بااستفاده از کتابخونه ، اطلاعات کاربری که نام‌کاربریش developmented هست رو دریافت کنه و سپس داخل کنسول چاپش کنه .<br/>\nاون هم اطاعت میکنه و نتیجه‌ش چیزی هست که در کنسولتون مشاهده می‌کنید :)<br/>\nدقت کنید که باید آیدی رو بدون اتساین (@) وارد کنید تا خروجی مطلوب رو دریافت کنید.<br/>\nآموزش بعدی : <a href=\"?v=5.2.3&doc=banGroupMember\">حذف یک کاربر از گروه</a>",
            "برای حذف یک کاربر از گروه کافیه آموزش زیر رو دنبال کنین. در این آموزش کوتاه میخوایم یاد بگیریم چطور میتونیم یک کاربر رو از گروهمون حذف کنیم.<br/>\nدقت کنین که اگر فرد موردنظر توسط ادمینی جز ربات ادمین شده باشه ربات نمیتونه ریموش کنه .<br/>\nبه کد زیر توجه کنین:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.banGroupMember(\"GUID\", \"UserGUID\")</code></pre>\nخب کاملا واضح و مبرهن هست. گذشته از خط یك و دو ، در خط سه متد banGroupMember رو فراخوانی کردیم و بهش دو مقدار رو پاس دادیم که مقدار اول شناسه گروهی هست که میخواین فرد موردنظر ازش ریمو بشه و پارامتر دوم هم شناسه همون کاربرد مورد نظر ما هست :)<br/>\nبخش بعدی :  <a href=\"?v=5.2.3&doc=invite\">افزودن کاربر به گروه</a>",
            "این قسمت به نظر خودم آموزش جالبی رو داریم. اد کردن کاربر به گروه بدون داشتن شماره !<br/>\nتنها مانعی که اینجا هست اینه که کاربر موردنظر نباید «دسترسی افزودن به گروه» رو بسته باشه.<br/>\nخب، بریم برای کد! به این مثال دقت کنین:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.invite(\"GUID\",[\"User1\",\"User2...\"])</code></pre>\nخط اول و دوم معلومه، اما خط سوم که بخش اصلی هست در ابتدا شناسه گروه رو میگیره و در پارامتر دوم شناسه کاربرانی رو که میخواین اضافه کنه دریافت میکنه . دقت کنین باید این شناسه ها رو داخل لیست بگذارید تا فرایند اد کردن با مشکل مواجه نشه. ضمنا گروهتون نباید محدود شده باشه وگرنه نه تنها بات که حتی کاربران هم نمیتونن کسی رو اد کنن! :)<br/>\nبخش بعد : <a href=\"?v=5.2.3&doc=getGroupAdmins\">استعلام مدیران گروه</a>",
            "برای دریافت مدیران یک گروه لازمه شناسه اون گروه رو داشته باشید. برای اطلاعات بیشتر ادامه آموزش رو دنبال کنید.<br/>\nبه کد های زیر دقت کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nadmins = bot.getGroupAdmins(\"GUID\")[\"data\"][\"in_chat_members\"]\nprint(admins)</code></pre>\nدر خط سوم، لیست ادمین های گروه با استفاده از شناسه گروه داخل متغییر admins ذخیره میشه و در خط چهارم این اطلاعات داخل کنسول چاپ میشه :)",
            "اگر آیدی چندتا پیام رو دارین و میخواین اطلاعاتی از قبیل نوع، فرستنده، متن و... رو به دست بیارین این آموزش بهتون کمک میکنه.<br/>\nابتدا به کد زیر توجه کنین:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nprint(bot.getMessagesInfo(\"GUID\",[\"ID1\",\"ID2\",\"ID3...\"]))</code></pre>\nخب اول که کتابخونه رو به پروژه اضافه کردیم<br/>\nبعد از کلاس Bot نمونه‌سازی کردیم\nدر نهایت گفتیم اطلاعات چند تا پیام که داخل گپی با شناسهٔ GUID ارسال شدن رو لازم داریم که داخل کنسول چاپ شه و این اتفاق میفته اگر تمام کار ها رو به درستی انجام بدین :)",
            "اگر میخواین بااستفاده از ربات دسترسی کاربران رو کنترل کنید این آموزش رو دنبال کنید.<br/>\nداخل این آموزش دو پیش نیاز داریم:<br/>\n1. شناسه گروه موردنظر\n<br/>2. دسترسی های موردنظر<br/><br/>\n<div class=\"quiz\">پرسش</div> اما از کجا میتونیم بدونیم چه دسترسی هایی اصلا وجود دارن؟<br/><br/>\n<div class=\"answer\">پاسخ</div> بااستفاده از دیکشنری usersAccess که در کتابخونه وجود داره.<br/><br/>\nبه کد زیر توجه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot, usersAccess\nbot = Bot(\"AUTH\")\nbot.setMembersAccess(\"GUID\", list(usersAccess.values()))\n</code></pre>\nخب این کد اندکی با کد های قبلی متفاوته، چرا که در خط اول متغییر usersAccess رو هم همراه کلاس Bot به پروژه ایمپورت کردیم اما قبلا فقط Bot رو ایمپورت میکردیم.<br/>\nدر خط دوم مثل همیشه اکانت بات رو مشخص میکنیم.<br/>\nاما در خط سوم با فراخوانی متد setMembersAccess دسترسی های کاربران گروهی که شناسه‌ش برابر GUID هست رو به تمام مقادیری که در usersAccess وجود داره تغییر دادیم.<br/>\nبرای اطلاع از مقادیر متغییر usersAccess کد زیر رو میتونین بعد از کد بالا وارد کنین:\n<pre><code class=\"language-python\">print(usersAccess.values())</code></pre>\nو سپس تمام مقادیر مطلوب رو مشاهده می‌کنید :)",
            "یه وقتایی هم هست که لازمه بات اطلاعات اعضای گروه رو بدونه، اطلاعاتی مثل نام، آیدی، شناسه و... که توی این آموزش بهش می‌پردازیم .<br/>\nابتدا به کد زیر توجه کنید :\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nprint(bot.getGroupMembers(\"GUID\"))</code></pre>\nاگه بگذریم از صحبت درمورد دو خط اول میتونیم بفهمیم در خط سوم با فراخوانی متد getGroupMembers از کلاس Bot و پاس دادنِ شناسه گروه موردنظرمون و سپس چاپ کردن نتیجهٔ این فراخوانی، الان خروجی مطلوب در کنسول چاپ شده :)",
            "برای دریافت اطلاعات گروه این آموزش رو دنبال کنین. در این آموزش فقط و فقط به شناسهٔ گروه موردنظرتون نیاز دارین.<br/>\nبه کد زیر توجه کنید :\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nprint(bot.getGroupInfo(\"GUID\")[\"data\"])</code></pre>\nخب ما طبق معمول از دو خط اول میگذریم و خط سوم رو تحلیل میکنیم.<br/>\nدر خط سوم خواستیم که اطلاعات گروهی که شناسه‌ش برابر GUID هست گرفته بشه و برامون چاپ بشه. به همین سادگی :)",
            "مثل آموزشات قبلی این یکی هم بسیار بسیار ساده و کاربردی هست. در این آموزش یاد میگیریم که چطوری از باتمون بخوایم لینک گروه موردنظرمون رو واسمون ارسال کنه؛ پس نیاز داریم به شناسهٔ اون گروه.<br/>\nخب شاید اول فکر کنین میخوایم با متد <a href=\"?v=5.2.3&doc=sendMessage\">ارسال پیام</a> لینک گروه رو ارسال کنیم اما خب نه اینطور نیست! بلکه همیشه لینک جدید گرفته میشه نه یک لینک ثابت، یعنی حتی اگر لینک رو هم عوض کنین ادمینا با این متد میتونن لینک رو دریافت کنن.<br/>\nکد زیر رو بررسی کنید :\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nlink = bot.getGroupLink(\"GUID\")</code></pre>\nاز خط اول و دوم میگذریم، در خط سوم یک متغییر به نام link تعریف کردیم و مقدارش رو برابر لینک گروهی که شناسه‌ش برابر GUID هست قرار دادیم. میتونین پرینت کنین، ارسال کنین یا هرکاری که دوست دارین :)",
            "یادگرفتیم چطور لینک گروه رو دریافت کنیم اما حالا میخوایم یادبگیریم اون رو تغییر بدیم. پس به شناسه گروه نیاز داریم تا بتونیم اینکار رو انجام بدیم.<br/>\nبه کد زیر توجه کنید :\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.changeGroupLink(\"GUID\")</code></pre>\nدر اینجا (خط سوم) از بات خواستیم که لینک گروهی که شناسه‌ش برابر GUID هست رو عوض کنه و اون هم این کار رو انجام میده :)",
            "این بار اومدیم برای آموزش تنظیم تایمر گروه. موارد موردنیاز شما برای این آموزش شناسه گروه موردنظر هست و تایمی که میخواید.\nابتدا به کد زیر توجه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.setGroupTimer(\"GUID\",10)</code></pre>\nدر واقع بااستفاده از کد بالا ما از بات خواستیم که «حالت آرام» گروهی که شناسه‌ش برابر GUID هست رو مساوی 10 ثانیه قرار بده :)",
            "در این آموزش با هم هستیم برای یادگیری نحوه ادمین کردن یک کاربر بااستفاده از ربات.<br/>\nخب اول از همه لازمه بدونین که ربات باید ادمین باشه و دسترسی افزودن ادمین رو هم بهش بدین، بعد شناسه گروه موردنظرتون رو داشته باشین، شناسه کاربری که میخواین ادمین بشه رو داشته باشین و درنهایت دسترسی هایی که میخواین اون فرد داشته باشه.<br/>\nداخل کتابخونه یک دیکشنری دیگه هم هست به اسم adminsAccess که داخلش دسترسی هایی که میتونین به یک ادمین بدین داخلش وجود داره.<br/>\nبه کد زیر توجه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot, adminsAccess\nbot = Bot(\"AUTH\")\nbot.setGroupAdmin(\"GroupGUID\",\"UserGUID\", list(adminsAccess.values()))</code></pre>\nخب در خط اول کد بالا، کلاس Bot رو مثل همیشه ایمپورت کردیم اما در کنارش این دفعه یک متغییر به نام adminsAccess رو هم ایمپورت کردیم به پروژه.<br/>\nخب در خط دوم که از کلاس Bot نمونه‌سازی کردیم.<br/>\nاما در خط سوم گفتیم فردی رو که شناسه‌ش برابر UserGUID هست رو در گروهی که شناسه‌ش GroupGUID هست ادمین کن و تمام دسترسی های موجود در مقادیر adminsAccess رو به اون فرد بده. و اون هم این کارو برامون انجام میده :)",
            "حالا که یادگرفتیم چطور یک ادمین اضافه کنیم، بیاین یادبگیریم چطور ادمینی رو عزل کنیم!<br/>\nبرای عمل به این آموزش نیاز به شناسهٔ گروه موردنظر و شناسهٔ ادمینی که میخواین عزل بشه دارید.<br/>\nدقت داشته باشید که ادمینی که میخواین عزل بشه رو باید بات ادمین کرده باشه و بات در حال حاضر ادمین یا مالک گروه شما باشه، وگرنه نمیتونین از کد زیر خروجی مطلوبتون رو دریافت کنید!<br/>\nکد زیر رو مشاهده کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.deleteGroupAdmin(\"GroupGUID\", \"UserGUID\")</code></pre>\nخب خط اول که مربوط به اضافه کردن کتابخونه به پروژه‌ست و خط دوم هم که نمونه‌سازی از کلاس Bot موجود در کتابخونه؛<br/>\nاما در خط سوم گفتیم که از گروهی که شناسه‌ش برابر GroupGUID هست، ادمینی که شناسه‌ش برابر UserGUID هست رو عزل کنه و در صورتی که تمام نکته گفته شده رو به درستی انجام داده باشیم اینکار با موفقیت انجام میشه :)",
            "برای خارج شدن از اکانت‌تون لازمه فقط کلیدش (auth) که درواقع آیدی یکتای نشست شماست رو داشته باشید.<br/>\nبه کد زیر توجه کنین:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.logout()</code></pre>\nهمون‌طور که می‌بینین نیاز به هیچ آرگومانی نیست. فقط باید بدونین که با خارج شدن از اکانت برای ورود مجدد بهش نیاز به لاگین کردن در اون دارین و در صورتی که لاگین کنین ، کلید اکانتتون تغییر میکنه و لازمه دوباره اون رو طبق آموزش های <a href=\"javascript: loadDocByIndex('5.2.3',1)\">قسمت دوم</a> پیش برید :)",
            "اگر لازمه رباتتون پیام‌هایی رو بازارسال کنه هیچ جای نگرانی نیست، چون این کتابخونه قابلیت فوروارد رو هم براتون فراهم کرده!<br/>\nخب طبیعتا لازمه شناسهٔ چتی که میخواین پیام ها رو ازش فوروارد کنه و شناسهٔ چتی که میخواین پیام ها رو بهش فوروارد کنه رو داشته باشین، آیدی پیام هایی که قراره فوروارد بشن رو همینطور.<br/>\nخب به کد زیر توجه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.forwardMessages(\"FromChat\",[],\"ToChat\")</code></pre>\nحالا کافیه در خط سوم بجای FromChat ، شناسه چتی که میخواین پیام ها ازش فوروارد بشن رو بنویسین، بجای ToChat ، شناسه چتی که میخواین پیام ها بهش فوروارد بشن رو و داخل [] هم آیدی پیام هایی که میخواین فوروارد بشن رو (هرکدوم رو در قالب string بنویسین) می‌نویسید تا پیام ها فوروارد بشن :)",
            "در این قسمت یاد میگیریم چطور چت‌اکشن هایی مثل «در حال نوشتن» و موارد این چنینی رو ارسال کنیم.<br/>\nخب اول از همه نیازمند چت‌آیدی ای هستین که میخواین بهش چت‌اکشن ارسال کنین و سپس نیاز دارین به نوع چت‌اکشنی که میخواین ارسال کنین.<br/>\n<div class=\"quiz\">پرسش</div>  چه چت اکشن هایی داریم؟\n<div class=\"answer\">پاسخ</div> اینها چت‌اکشن هایی هستن که میتونیم ارسال کنیم:<br/>\n1. Typing<br/>\n2. Recording<br/>\n3. Uploading<br/>\nحالا برای استفاده باید طبق کد زیر عمل کنیم:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.sendChatAction(\"GUID\",\"Typing\")</code></pre>\nدرواقع داخل خط سوم گفتیم در چتی که آیدیش GUID هست ، ربات ما رو «در حال نوشتن» نشون بده.. حالا میتونین جای Typing هرکدوم از مواردی که در بالاتر ذکر کردیم رو بنویسین :)",
            "حالا میخوایم یک پیام رو داخل یک چت (کانال/گروه/پیوی) سنجاق کنیم. برای اینکار لازم هست آیدیِ پیام و شناسهٔ چت موردنظر رو داشته باشیم.<br/>\nفرض میکنیم شما از قبل با استفاده از تابع getMessages ، پیام ها رو گرفتین و حالا هم آیدی پیامی که میخواین رو دارین ، شناسهٔ چت موردنظر رو هم همچنین؛ پس کد زیر رو نگاه می‌کنیم:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.pin(\"GUID\",\"message_id\")</code></pre>\nبا توجه به خط سوم خواستیم در چتی که شناسه‌ش برابر GUID هست، پیامی که آیدیش message_id هست رو سنجاق کنه. پس از جایگزینی مقادیر لازم کد رو اجرا میکنیم و درخواستمون اجرا میشه :)",
            "حالا میخوایم یک پیام سنجاق‌شده داخل یک چت (کانال/گروه/پیوی) رو از حالت سنجاق خارج کنیم. برای اینکار لازم هست مثل آموزش قبل آیدیِ پیام و شناسهٔ چت موردنظر رو داشته باشیم.<br/>\nکد زیر رو نگاه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.unpin(\"GUID\",\"message_id\")</code></pre>\nبا توجه به خط سوم خواستیم در چتی که شناسه‌ش برابر GUID هست، پیامی که آیدیش message_id هست رو از حالت سنجاق خارج کنه. پس از جایگزینی مقادیر لازم کد رو اجرا میکنیم و درخواستمون اجرا میشه :)",
            "این قسمت از آموزش، میخوایم بپردازیم به عضویت در یک گروه. برای اجرایی شدن این آموزش فقط نیاز به لینک گروهی که میخوایم ربات داخلش عضو بشه داریم.<br/>\nبه کد زیر توجه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.joinGroup(\"https://rubika.ir/joing/...\")</code></pre>\nکافیه داخل متد joinGroup لینک گروه رو مانند نمونه، جایگذاری کنیم تا ربات داخل گروه موردنظر عضو بشه :)",
            "این قسمت از آموزش، میخوایم بپردازیم به ترک گروه. برای اجرایی شدن این آموزش نیاز به شناسهٔ گروهی که میخوایم ربات داخلش عضو بشه داریم.<br/>\nبه کد زیر توجه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.leaveGroup(\"https://rubika.ir/joing/...\")</code></pre>\nکافیه داخل متد leaveGroup شناسهٔ گروه رو مانند نمونه، جایگذاری کنیم تا ربات، گروه موردنظر رو ترک بکنه :)",
            "حالا نوبتی هم باشه نوبت یادگیری مسدود کردن کاربر هست. با این آموزش می‌تونین به رباتتون این قابلیت رو بدین که فرد موردنظر رو مسدود (block) کنه.<br/>\nپس کد زیر رو بررسی کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.block(\"GUID\")</code></pre>\nحالا کافیه بجای GUID ، شناسهٔ کاربری که میخواین بات بلاکش بکنه رو جایگذاری بکنید تا بات اینکار رو انجام بده :)",
            "شاید خواستین وقتی بات کسی رو بلاک کرد بعدا اون رو آن‌بلاک بکنه. با این آموزش می‌تونین به هدفتون برسین.<br/>\nپس کد زیر رو بررسی کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.unblock(\"GUID\")</code></pre>\nحالا کافیه بجای GUID ، شناسهٔ کاربری که میخواین بات رفع‌مسدودیت (unblock) بکنتش رو جایگذاری بکنید تا بات اینکار رو انجام بده :)",
            "خب یه بخش جذاب دیگه رو داریم که باهاش میتونیم عکس ارسال کنیم. در آینده ارسال فایل رو هم یاد میگیریم، فرق این دو تا در دو مورد هست؛ اول اینکه پارامتر های بیشتری برای عکس باید بدین دوم اینکه شکل نمایش خروجی فرق داره. در فایل میتونین هر فایلی رو ارسال کنین اما با ارسال عکس فقط میتونین فرمت های تصویری (png/jpg/gif/...) رو ارسال کنین.<br/>\nخب اما برای این آموزش نیاز داریم به شناسهٔ چت، آدرس دقیق تصویر موردنظر، طول و عرض تصویر. (پارامتر های اختیاری : thumbnail , caption , message_id)<br/>\nبا توجه به اینکه تصور میکنیم تصویر ما اسمش image.jpeg هست و در کنار فایل پروژه هست، به کد زیر توجه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.sendPhoto(\"GUID\", \"./image.jpeg\", [720,720])</code></pre>\nدر خط سوم از بات خواستیم تصویری که در آدرس image.jpeg/. قرار داره رو به گفتگویی که شناسه‌ش برابر GUID هست بفرسته و لحاظ کردیم که عرض و طول تصویر به ترتیب 720 در 720 هست. و اگر مقادیر رو به درستی پر کرده باشیم بات هم درخواستی که داریم رو اجرا میکنه :)",
            "حتما خواستین باتتون یک ویس بفرسته اما نمیدونین چطور.. توی این آموزش با هم یاد میگیریم چطوری باید کاری کنیم که بات ویس بفرسته.<br/>\nاول از همه باید بدونین این آموزش نیاز داره به:<br/>\n1. شناسهٔ چتی که داخلش میخواین ویس ارسال بشه<br/>\n2. مسیر دقیق فایل (فرمتش باید ogg باشه)<br/>\n3. مدت زمان پخش ویس (مقدار به میلی‌ثانیه هست و تایپش هم باید int باشه)<br/>\n- مقادیر اختیاری : caption که همون طور که معلومه کپشن ویس هست و message_id که برای ریپلای زدن استفاده میشه و باید بهش آیدی پیامی که میخواین روش ریپلای بزنه رو در قالب str بدین.<br/>\nکد زیر رو مشاهده کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.sendVoice(\"GUID\",\"./voice.ogg\",3000)</code></pre>\nحالا کافیه بجای GUID شناسه چت موردنظر واسه ارسال رو جایگزین کنیم و فایلی به نام voice.ogg ضبط کنیم و در کنار فایل اجرایی قرار بدیم. سپس کد رو اجرا کنیم تا بات، فایل موردنظر رو به چتی که قرار دادیم ارسال کنه :)",
            "اومدیم با آموزش ارسال فایل. اول از همه ، مسیر فایل + شناسهٔ چتی رو لازم داریم که قراره فایل بهش ارسال بشه.<br/>\nیک سری مقادیر اختیاری هستن که تفاوتی با مقادیر اختیاریِ قسمت قبلی ندارن پس دوباره توضیح نمیدم.<br/>\nکد زیر رو بررسی کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.sendDocument(\"GUID\",\"./file.pdf\")</code></pre>\nخب، کافیه بجای GUID ، شناسهٔ چتی که میخوایم فایل بهش ارسال بشه رو بنویسیم و بجای file.pdf/. هم آدرس <b>دقیق</b> فایل رو تا بات برامون فایل رو ارسال کنه :)",
            "یک آموزش جدید اما نه‌چندان کاربردی رو داریم که میتونین ازش عبور کنین. در این آموزش برای ارسال موقعیت مکانی نیاز داریم به شناسهٔ چتی که مورد نظرمون هست بعلاوهٔ طول و عرض جغرافیایی. همچنین مقدار اختیاری message_id رو داریم برای ریپلای زدن.<br/>\nبه کد زیر توجه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.sendLocation(\"GUID\",[16.8578,124556.889544])</code></pre>\nخب همون‌طور كه در خط سوم مشاهده میکنید، از بات خواستیم موقعیت مکانی به عرض 16.8578 و طول 124556.889544 رو برامون به چتی که شناسه‌ش برابر GUID هست ارسال کنه و این درخواست انجام میشه اگر شناسه خودمون رو وارد کنیم :)",
            "یه آموزش کوتاه داریم درمورد سرچ کردن یک عبارت در اعضای کانال. بااستفاده از این آموزش میتونین حتی چک کنین فردی در کانالتون حضور داره یا خیر. پس اول از همه نیاز به عبارتی که میخواین جستجو کنین دارین و در وحله دوم نیاز دارین به شناسهٔ کانالتون.<br/>\nضمنا یادتون نره بات باید داخل کانالتون ادمین باشه تا بتونه لیست اعضا رو ببینه!<br/>\nخب حالا کد زیر رو مشاهده کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nprint(bot.searchInChannelMembers(\"YourText\", \"GUID\"))</code></pre>\nکافیه بجای YourText عبارت موردنظر و بجای GUID شناسهٔ کانال رو جایگزین کنین تا خروجی داخل کنسول چاپ شه :)",
            "میخوایم با هم یاد بگیریم چطور به‌روزرسانی های چت رو دریافت کنیم. منظور از این به‌روزرسانی پیام های جدید، پیام های ویرایش شده و مواردی از این قبیل هست.<br/>\nخب به کد زیر توجه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nprint(bot.getChatUpdate(\"GUID\"))</code></pre>\nحالا کافیه بجای GUID در خط سوم شناسهٔ چت موردنظرتون رو جایگزین کنید و سپس اجرا کنید تا به‌روزرسانی های چت دریافت و در کنسول نمایش داده بشه :)",
            "میخوایم با هم یاد بگیریم چطور به‌روزرسانی های چت ها رو دریافت کنیم. منظور از این به‌روزرسانی پیام های جدید، پیام های ویرایش شده و مواردی از این قبیل هست.<br/>\nخب به کد زیر توجه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nprint(bot.getChatsUpdate())</code></pre>\nحالا کد رو اجرا کنید تا به‌روزرسانی های چت ها رو دریافت کنید :)",
            "پیام‌رسان شاد شباهت بسیار زیادی به روبیکا داره به طوری که میشه گفت فقط سرور ها ، نسخه ها و دیتابیسی متفاوتی داره و سایر موارد حتی رمزنگاری مشابه دارن؛ که این شباهت زیاد باعث شده ما بتونیم همون‌طور که برای روبیکا ربات می‌سازیم برای شاد هم بتونیم ربات بسازیم.<br/>\nدر نسخه 5.2.3 از کتابخونه، ما یکسری متد ها رو برای شاد هم تبدیل کردیم اما اون متد هایی که به کلاینت اندرویدی نیاز داشتن رو محول کردیم به نسخه های بعدی کتابخونه.<br/>\nهرکدی که زدین، کافیه بجای rubika.client بنویسین rubika.shad و همچنین auth مربوط به اکانت شادتون رو وارد کنین و اگر شناسه چتی رو وارد کردین شناسه چت موردنظر در شاد رو وارد کنید تا رباتتون بتونه در بستر شاد فعالیت کنه :)",
            "اینکه شما بخواین بات مدام پیام ها رو بگیره ممکنه علاوه بر کُند شدنش مشکلاتی مثل اِشغال حجم زیادی از رَم رو در بر داشته باشه.\n<br/><div class=\"quiz\">پرسش</div> خب حالا چاره چیه؟<br/>\n<br/><div class=\"answer\">پاسخ</div> شما با استفاده از ابزار faster در کتابخونه می‌تونین این مشکل رو برطرف کنین :)<br/>\nبه کد زیر توجه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nfrom rubika.tools import Tools\n\nbot = Bot(\"AUTH\")\ntools = Tools(bot.auth)\n\ndef control(data): print(data)\n\ntools.faster(control)</code></pre>\nخب در خط اول که کلاس Bot رو به پروژه اضافه کردیم، در خط بعد ابزار ها رو به پروژه اضافه کردیم، در خط بعدش از کلاس Bot نمونه‌سازی کردیم و در خط چهارم از کلاس Tools نمونه‌سازی کردیم. بعد در خط پنجم متدی که میخوایم پیام های دریافتی از طریق سوکت رو کنترل کنه رو تعریف کردیم و درنهایت ازش در متد faster استفاده کردیم.<br/>\nحالا ربات هروقت پیامی بیاد اون رو در قالب dict که شامل کلید های error و messages هست به متد control میده که هردوی این کلید ها از نوع list هستن :)<br/>\nراستی برای استفاده از این قابلیت لازمه کتابخونه websocket-client رو بااستفاده از دستور زیر نصب کنین:\n<pre><code class=\"language-bash\">pip install websocket-client</code></pre>",
            "یه وقتی ممکنه بخواین به صورت دستی از رمزنگاری استفاده کنین. پس اگر حس میکنین لازمتون هست این آموزش رو دنبال کنین.<br/>\nابتدا به کد زیر توجه کنین:\n<pre><code class=\"language-python\">from rubika.encryption import encryption\nenc = encryption(\"AUTH\")\nprint(enc.decrypt(\"ETEXT\"))\nprint(enc.encrypt(\"DTEXT\"))</code></pre>\nدر خط اول کلاس موردنظر رو ایمپورت کردیم.<br/>\nدر خط دوم از اون نمونه‌سازی کردیم.<br/>\nدر خطوط سوم و چهارم به ترتیب متن موردنظر رو رمزگشایی و رمزگذاری کردیم و خروجی رو نمایش دادیم :)",
            "خب حالا که دیگه رسیدیم به آخرین قسمتِ مستندات شاید لازم داشته باشین بعضی مفاهیم دوباره براتون توضیح داده بشه.<br/>\nیه سری لغات بودن که زیاد داخل این قسمت ها استفاده شدن که در این بخش با هم بهشون می‌پردازیم.<br/>\n<h3>لغات</h3><br/>\n<b>کلید اکانت</b> یک رشته (String) شامل ۳۲ کاراکتر هست که هر اکانت فقط یه دونه ازش داره و با هر بار لاگین کردن عوض میشه.<br/>\n<b>چت</b> به معنای گفتگو هست و شامل کانال، گروه و پیوی میشه.<br/>\n<b>شناسه</b> ، هر چت یک شناسه داره که غیر قابل تغییر هست. شناسه یک گروه با حرف g ، کانال با حرف c و پیوی با حرف u نمایش داده میشه.<br/>\n<b>لینک</b> ، منظور از لینک [گروه/کانال] لینک داخلی روبیکا هست که مرتبط با گروه یا کانال شماست.<br/>\nبرای درک سایر مفاهیم الزامی هستش که برنامه‌نویسی پایتون رو بلد باشین تا بتونین به نحو احسن از کتابخونه استفاده کنین :)"
        ]
    },
    "5.3.4": {
        "details": {
            "commit": "\n-افزودن متد آپلود/حذف/دریافت پروفایل<br/>\n-رفع مشکل URL قسمت شاد<br/>\n-متد کاربردی دانلود!<br/>\n-و... :)\n",
            "date": "1400/11/6"
        },
        "links": [
            "sendMessage",
            "inviteChannel",
            "groupPreviewByJoinLink",
            "uploadAvatar",
            "startVoiceChat",
            "editVoiceChat",
            "finishVoiceChat",
            "getAvatars",
            "deleteAvatar",
            "editProfile",
            "download"
        ],
        "titles": [
            "ارسال پیام",
            "افزودن عضو به کانال",
            "پیش‌نمایش گروه ازطریق لینک",
            "آپلود پروفایل",
            "شروع گفتگوی صوتی",
            "تغییر عنوان گفتگوی صوتی",
            "اتمام گفتگوی صوتی",
            "دریافت پروفایل ها",
            "حذف پروفایل",
            "تغییر اطلاعات پروفایل",
            "دانلود"
        ],
        "descriptions": [
            "خب خیلی سریع وارد اولین بخش آپدیت جدید کتابخونه میشیم. در متد ارسال پیام یک قابلیت جالب اضافه شده و اون هم اینه که شما بجای اینکه در metadata برای بولد، ایتالیک و مونو کردن متن پیام مجبور باشین اطلاعات رو وارد کنین خیلی راحت با استفاده از تگ های htmlـی که تعیین کردیم متنتون رو بولد، ایتالیک یا مونو کنین.<br/>\nاول از همه کتابخونه رو آپدیت کنین\n<pre><code class=\"language-bash\">pip install rubika --upgrade</code></pre>\nو حالا به این تگ ها توجه کنین: b،i،pre. با استفاده از این سه تگ و قرار دادن متن موردنظر داخل هر کدوم به ترتیب اون قسمت مونو،ایتالیک و بولد میشه. به این صورت کافیه متن رو همراه تگ ها قرار بدین:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.sendMessage(\"GUID\",\"paste text with tags\",markup=\"HTML\")</code></pre>\nخب می‌بینین هیچ چیزی تغییری نکرده مگر یک پارامتر جدید به عنوان markup که در صورتی که مقدارش رو \"HTML\" قرار بدین به صورت اتوماتیک metadata رو می‌سازه و بعد پیام رو ارسال می‌کنه :)",
            "فصل قبل (داکیومنت هرنسخه رو یک فصل میدونیم) درمورد افزودن عضو به گروه آموزش دیدیم اما این فصل در این قسمت میخوایم افزودن عضو به کانال رو یاد بگیریم.<br/>\nافزودن عضو به کانال هم مثل افزودن عضو به گروهه و تنها فرقی که داره اینه که اونجا شما شناسهٔ گروه رو وارد میکنین اینجا شناسهٔ کانال رو اما اینجا باید ربات ادمین باشه داخل کانالتون و دسترسی افزودن عضو رو هم داشته باشه.<br/>\nکد زیر رو مشاهده کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.inviteChannel(\"ChannelGUID\", [\"UsersGUID\"])</code></pre>\nحالا کافیه هرکار برای افزودن عضو به گروه با ربات میکردین همون کار رو علاوه بر اقداماتی که در بالا توضیح داده شدن انجام بدین تا اعضا به کانالتون اضافه بشن :)",
            "یه وقتی هم هست که ما میخوایم بدون اینکه ربات داخل گروهی عضو باشه یه سری اطلاعات مثل اسم گروه، شناسه‌ش و مواردی از این قبیل رو به دست بیاره. پس این آموزش رو دنبال کنین<br/>\nکد زیر رو بررسی کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nprint(bot.groupPreviewByJoinLink(\"link\"))</code></pre>\nدر خط سوم کافیه لینک گروهمون رو به جای link بگذاریم سپس کد رو اجرا کنیم تا اطلاعات موردنظرمون نمایش داده بشن :)",
            "یکی از متد های جدیدی که اضافه شده آپلود پروفایل هست. کافیه شناسهٔ چت موردنظرتون رو داشته باشین و ادامه آموزش رو مطالعه کنید.<br/>\nکد زیر رو مطالعه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.uploadAvatar(\"myGUID\", \"./profile.jpg\")</code></pre>\nدر خط سوم به بات گفتیم پروفایل چتمون‌ که شناسه‌ش برابر myGUID هست رو برابر فایل profile.jpg/. قرار بده و اون این کار رو انجام میده :)<br/>\n~ راستی یک نکته جالب داخل این نسخه کتابخونه اضافه شده اونم اینکه داخل هر متدی که نیاز به آدرس فایل بوده میتونین بجای آدرس فایل لینک مستقیم فایل بدین ;)",
            "میتونین بااستفاده از این نسخه از کتابخونه حتی داخل گروه یا کانالتون ویس‌چت بذارین.<br/>\nکد زیر رو مشاهده کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.startVoiceChat(\"GUID\")</code></pre>\nحال کافیه بجای GUID ، شناسهٔ گروه یا کانالتون که ربات داخلش ادمینه و دسترسی لازم رو داره رو جایگزین کنین تا ویس‌چت شروع شه :)",
            "حالا اگه دوست دارین عنوان گفتگوی صوتی رو بااستفاده از ربات تغییر بدین این آموزش رو دنبال کنین.<br/>\nابتدا کد زیر رو مشاهده کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.editVoiceChat(\"GUID\",\"ID\",\"new title\")</code></pre>\nحال کافیه بجای GUID ، شناسهٔ گروه یا کانالتون که ربات داخلش ادمینه و دسترسی لازم رو داره رو جایگزین کنین. بجای new title متنی که میخواین در قسمت عنوان گفتگوی صوتی قرار بگیره رو قرار بدین. و بجای ID ، آیدی گفتگوی صوتی‌ای رو قرار بدین که میخواین عنوانش عوض بشه تا عنوان ویس‌چت تغییر کنه :)",
            "با استفاده از این آموزش میتونین به گفتگوی صوتی خاتمه بدین. فقط کافیه آیدی گفتگوی صوتی موردنظر به همراه با شناسهٔ گروه یا کانالی که گفتگوی صوتی داخلش قرار داره رو داشته باشین.<br/>\nحالا کد زیر رو مشاهده کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.finishVoiceChat(\"GUID\", \"ID\")</code></pre>\nبجای GUID باید شناسهٔ گروه یا کانال موردنظر و بجای ID هم آیدی گفتگوی صوتی‌ای که لازمه خاتمه پیدا کنه رو جایگزین کنین و کد رو اجرا کنین تا گفتگوی صوتی تموم بشه :)",
            "در پایان این آموزش میتونین پروفایل های یک چت رو دریافت کنین و در صورت نیاز، اونها رو بااستفاده از متد download دانلودشون کنین.<br/>\nبه کد زیر توجه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nprint(bot.getAvatars(\"GUID\"))</code></pre>\nکافیه بجای GUID ، شناسهٔ چت مورد نظر رو جایگزین ، سپس کد رو اجرا و خروجی مطلوب رو دریافت کنیم :)",
            "برای حذف یکی از پروفایل ها کافیه علاوه بر شناسهٔ چتتون ، آیدی پروفایلی که میخواین حذف بشه رو هم داشته باشین.<br/>\nبه کد زیر توجه کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.deleteAvatar(\"myGUID\", \"AvatarID\")</code></pre>\nکافیه myGUID و AvatarID رو با شناسهٔ چتتون و آیدی تصویر پروفایل موردنظرتون جایگزین کنین و سپس کد رو اجرا کنین تا تصویر موردنظرتون از پروفایل چت موردنظر حذف بشه :)",
            "برای تغییر اطلاعات حساب کاربری از قبیل نام، نام‌خانوادگی و نام‌کاربری این آموزش رو دنبال کنید.\nابتدا این کد رو مشاهده کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.editProfile(first_name=\"John\",last_name=\"Doe\",username=\"imjohndoe\")</code></pre>\nدر خط سوم هرکدوم از آرگومان ها رو میتونین کم کنین و یا تغییر بدین و در نهایت اجرا کنید تا اطلاعات حساب کاربری ربات تغییر پیدا کنه :)",
            "بخش جذاب دانلود رو با هم میخوایم یاد بگیریم. برای این آموزش اول باید بدونین که میخواین یک پیام (ویدیو/تصویر/موزیک/فایل که در قالب پیام ارسال شدن) رو دانلود کنین یا موردی مثل عکس پروفایل رو؟<br/>\nاگر پیام رو میخواین دانلود کنین طبق کد زیر پیش برین:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.download(message={}, save=True)</code></pre>\nحالا کافیه بجای {} ، پیام رو در قالب دیکشنری (همون json اما باید با json.loads تبدیل شده باشه) به متد بدین و اگر میخواین فایل ذخیره بشه آرگومان save که در حالت عادی False هست رو به True تبدیل کنین و اگر میخواین مسیر فایل رو خودتون تعیین کنین یک متغییر به اسم saveAs بسازین و مقدارش رو مسیر دقیق (همراه با نام فایل) فایلی که میخواین اطلاعات داخلش ذخیره بشه قرار بدین.<br/>\nحالا اگه نمیخواین یک پیام رو دانلود کنین باید مقادیر dc_id , fileID , size و accessHashRec رو داشته باشین سپس کد زیر رو بررسی کنید:\n<pre><code class=\"language-python\">from rubika.client import Bot\nbot = Bot(\"AUTH\")\nbot.download(dl=\"NotMessage\", dc_id=\"123\", fileID=\"12345678\", size=131072, accessHashRec=\"access-hash-rec\")</code></pre>\nحالا با بررسی آرگومان ها و تطابق اونها با اطلاعاتی که درمورد فایلی که میخواین دانلود کنین در اختیار دارین میتونین فایل رو دانلود کنین ، البته درمورد آرگومان های save و saveAs هم همون اطلاعاتی که در بخش قبل (دانلودِ پیام) توضیح دادیم صدق میکنه. حالا کد رو تغییر بدین و اجراش کنین در نهایت صبر کنین تا فایل دانلود شه :)"
        ]
    },
    "6.0.0": {
        "details": {
            "commit": "نسخه ۶.۰.۰ پاسخی برای همه نیاز های شماست!<br/>- افزایش چند برابری سرعت<br/>- ساده‌سازی سینتکس<br/>- افزودن بیش از ۱۰ متد جدید<br/>- رفع مشکلات جزئی",
            "date": "1401/5/1"
        },
        "links": [
            "addContact",
            "addGroup",
            "addChannel",
            "banMember",
            "deleteAdmin",
            "addFolder",
            "changeLink",
            "changePassword",
            "checkPassword",
            "deleteFolder",
            "deleteUserChat",
            "disablePassword",
            "editFolder",
            "getMe",
            "getBlacklist",
            "getMyBlacklist",
            "getAdmins",
            "getChats",
            "getMembers",
            "getInfo",
            "getLink",
            "getPreviewByJoinLink",
            "getPollStatus",
            "getPollOptionVoters",
            "getPostByLink",
            "getUserCommonGroups",
            "getTwoPasscodeStatus",
            "getPrivacySetting",
            "getNotificationSetting",
            "getFolders",
            "getOwning",
            "getGroupOnlineMembersCount",
            "getMySessions",
            "getContacts",
            "invite",
            "join",
            "leave",
            "editChatInfo",
            "muteChat",
            "reportChat",
            "removeChat",
            "setAsShad",
            "sendMessage",
            "sendVideo",
            "sendMusic",
            "sendGIF",
            "sendContact"
        ],
        "titles": [
            "افزودن مخاطب",
            "ایجاد گروه",
            "ایجاد کانال",
            "حذف عضو",
            "عزل ادمین",
            "ایجاد پوشه",
            "تعویض لینک",
            "تغییر رمزعبور دومرحله‌ای",
            "بررسی رمزعبور دومرحله‌ای",
            "حذف پوشه",
            "حذف چت‌روم کاربر",
            "غیرفعالسازی رمزعبور دومرحله‌ای",
            "ویرایش پوشه",
            "دریافت اطلاعات اکانت",
            "گرفتن لیست سیاه",
            "گرفتن لیست کاربران بلاک شده",
            "گرفتن ادمین ها",
            "گرفتن چت‌ها",
            "گرفتن اعضا",
            "دریافت اطلاعات",
            "دریافت لینک",
            "دریافت اطلاعات با لینک دعوت",
            "دریافت وضعیت نظرسنجی",
            "دریافت رأی‌دهندگان نظرسنجی",
            "دریافت اطلاعات پست ازطریق لینک",
            "دریافت گروه های مشترک",
            "دریافت وضعیت رمزعبور دومرحله‌ای",
            "دریافت تنظیمات حریم‌خصوصی",
            "دریافت تنظیمات اعلانات",
            "دریافت پوشه‌ها",
            "دریافت مالکیت",
            "گرفتن تعداد اعضای آنلاین گروه",
            "دریافت نشست‌های فعال",
            "دریافت مخاطبین",
            "افزودن عضو",
            "عضویت",
            "لغو عضویت",
            "تغییر اطلاعات چت",
            "بی‌صدا کردن چت",
            "گزارش دادن چت",
            "حذف چت",
            "پیام‌رسان شاد",
            "ارسال پیام",
            "ارسال ویدیو",
            "ارسال موسیقی",
            "ارسال گیف",
            "ارسال مخاطب"
        ],
        "descriptions": [
            "برای افزودن مخاطب به مخاطبین موجود در حساب روبیکا کافیه طبق این آموزش عمل کنید.<br/>\nخب اول از همه به کد زیر توجه کنید:<br/>\n<pre><code class=\"language_python\">\nfrom rubika import Bot\n\nbot = Bot(\"AddContact\", \"AUTH\")\n\nbot.addContact(\"FirstName\", \"LastName\", \"09123456789\")\n</code></pre>\nدر خط اول کتابخونه روبیکا رو import کردیم داخل پروژمون.<br/>\nدر خط دوم یک instance از کلاس Bot ساختیم و پارامتر اول که نام پروژمون هست رو برابر AddContact قرار دادیم (البته که این نام رو میتونید به مقدار دلخواه خودتون تغییر بدید) و پارامتر دوم که شناسهٔ حساب‌کاربری یا auth هست رو برابر AUTH قرار دادیم (شما باید این مقدار رو با شناسهٔ اکانت خودتون که یک String ۳۲ کاراکتری هست جایگزین کنین).<br/>\nاما خط سوم که قسمت اصلی کد ما هست، شامل دستور افزودن مخاطب هست. در این خط از متغییر bot که همون instance ساخته شده در خط دوم هست ، متد addContact رو فراخوانی کردیم؛ سپس پارامتر های موردنیاز رو بهش میدیم که پارامتر اول این متد first name یا نام مخاطب هست، پارامتر دوم last name یا نام خانوادگی مخاطب هست و پارامتر سوم شماره تلفن مخاطب هستش که باید با ۰ شروع بشه و تعداد ۱۱ کاراکتر داره.<br/> تمامی پارامتر ها به نوع String هستن .",
            "حالا اگه قرار باشه ربات ما قابلیتی داشته باشه تا بتونه که یک گروه ایجاد بکنه، ما چطور میتونیم اون رو پیاده‌سازی کنیم؟<br> کافیه اول این کد رو نگاه کنین:<br> <pre><code class=\"language-python\">from rubika.client import Bot\n\n bot = Bot(\"AddGroup\", \"AUTH\")\n\n bot.addGroup(\"GroupName\", [\"SomeUserIDForInvite\"]) </code></pre><br> خب در خط اول و دوم که میدونیم چی میگذره اما خط سوم . .<br> در خط سوم ما از متد addGroup استفاده کردیم که برای ایجاد گروه استفاده میشه؛ این متد دو پارامتر میگیره که پارامتر اول نام گروه هست و باید به صورت رشته (String) وارد بشه و پارامتر دوم یک لیست شامل چت‌آیدی (guid) کاربرانی هست که باید به اون گروه اضافه بشن که این لیست نمیتونه خالی بمونه .",
            "حالا اگه قرار باشه ربات ما قابلیتی داشته باشه تا بتونه که یک کانال ایجاد بکنه، ما چطور میتونیم اون رو پیاده‌سازی کنیم؟<br> کافیه اول این کد رو نگاه کنین: <pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"AddChannel\", \"AUTH\")\n bot.addChannel(\"ChannelName\") </code></pre> خب در خط اول و دوم که میدونیم چی میگذره اما خط سوم ..<br> در خط سوم ما از متد addChannel استفاده کردیم که برای ایجاد کانال استفاده میشه؛ این متد فقط یک پارامتر میگیره که اون هم نام کانال هست و باید به صورت رشته (String) وارد بشه.<br> البته دو پارامتر دیگه هم هستن که وارد کردن اونها اختیاری هست:<br> پارامتر دوم نوع کانال هست که باید به صورت رشته (String) و برابر با یکی از مقادیر Public و Private باشه (این پارامتر Case Sensitive هست!)<br>و پارامتر سوم یک لیست شامل چت‌آیدی (guid) کاربرانی هست که باید به اون کانال اضافه بشن که این لیست میتونه خالی بمونه .",
            "توی نسخه های قبلی این متد دو متد مجزا بود که یکی برای حذف عضو از گروه و دیگری برای حذف عضو از کانال استفاده می‌شد. اما در این نسخه هردو متد تبدیل به این متد شدن و خود متد تشخیص میده که جایی که عضو باید از اونجا حذف بشه یک کانال هست یا یک گروه!<br> اول به کد زیر نگاهی بکنین: <pre><code class=\"language-python\">from rubika.client import Bot \nbot = Bot(\"BanMember\", \"AUTH\") \nbot.banMember(\"ChatID\", \"UserID\")</code></pre> خب در دو خط اول ما پیش‌نیاز ها رو تنظیم کردیم (ایمپورت کردن کلاس Bot و ساختن instance ازش)<br>و در خط سوم از تابع banMember استفاده کردیم. این تابع برای اجرا نیاز به دو پارامتر ChatID و UserID هست که اولی شناسهٔ کانال یا گروهی هست که باید کاربر موردنظر ازش حذف بشه و دومی شناسهٔ کاربری که باید از کانال یا گروه موردنظر حذف بشه.<br> <i>ضمنا یادتون نره که ربات باید در گروه/کانال موردنظر ادمین باشه و دسترسی حذف اعضا رو هم داشته باشه !</i>",
            "با این متد میتونین یک ادمین رو از کانال یا گروهتون عزل بکنید.<br>این متد در نسخه قبلی کتابخونه فقط برای گروه وجود داشت و قابل استفاده برای کانال ها نبود که الان این قابلیت وجود داره پس اسمش از deleteGroupAdmin به deleteAdmin عوض شد.<br>ضمنا ادمینی که میخواین توسط ربات عزل کنین رو باید پیشتر ربات ادمین کرده باشه و یا ربات مالک گروه/کانال موردنظر باشه تا بتونه اون ادمین رو عزل بکنه. (این محدودیت درمورد api روبیکا هست و همونطور که احتمالا میدونید در خود روبیکا هم چنین محدودیتی وجود داره).<br>حالا به این کد توجه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"DeleteAdmin\", \"AUTH\")\n bot.deleteAdmin(\"ChatID\", \"UserID\")</code></pre><br>در خط سوم از تابع deleteAdmin استفاده کردیم که نیاز به دو پارامتر داره که اولیش شناسهٔ کانال/گروه موردنظر هست که<br> فرد موردنظر جهت عزل کردن داخلش ادمینه و پارامتر دوم شناسهٔ خود فرد موردنظر هست. هردو پارامتر هم باید به صورت رشته (String) وارد بشه.",
            "در نسخه جدید روبیکا قابلیت پوشه‌بندی چت ها اضافه شده پس طبیعتا داخل کتابخونه هم اضافه شد.<br> در این آموزش میخوایم یاد بگیریم چطور میشه یک پوشه بسازیم. پس به این کد توجه کنید: <pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"AddFolder\", \"AUTH\")\n bot.addFolder(\"NAME\")</code></pre> پس یک پوشه خالی به این شکل اضافه میشه. اما خب اینکه فایده‌ای نداره؛ باید بتونیم چت هامون رو بهش اضافه کنیم.<br> • چت هایی که نباید اضافه بشن : exclude_object_guids<br> • انواع چت هایی که نباید اضافه بشن : exclude_object_guids<br> • چت هایی که باید اضافه بشن : include_object_guids<br> • انواع چت هایی که باید اضافه بشن : include_chat_types<br> منظور از «انواع چت‌ها» یعنی دستهٔ خاصی از چت‌ها، مثلا Groups, Channels, Bots, Services, Privates و منظور از خود چت ها یعنی مواردی که باید دستی اضافه بشن، فلان‌گروه، فلان‌کانال و ... که باید guidشون رو وارد کنید. همچنین وقتی میگیم «چت هایی که نباید اضافه بشن» بعنوان مثال همه گروه ها رو به اون پوشه اضافه میکنه بجز اون هایی که در لیست مذکور قرار گرفتن.<br> همه پارامتر های اختیاری که توضیح داده شد از نوع list هستن.",
            "با این متد میتونین لینک گروه و یا کانال خصوصیتون رو تغییر بدین؛ البته به مقداری که روبیکا میخواد نه مقدار دلخواه خودتون چون لینک این موارد توسط خود روبیکا و به صورت تصادفی معَین میشه.<br>این متد در نسخه های قبلی کتابخونه وجود داشته ولی اسمش changeGroupLink بوده و فقط برای گروه کاربرد داشته اما الان میتونه لینک کانال های خصوصی رو هم تغییر بده و اینکه باید لینک یک گروه رو تغییر بده یا لینک یک کانال رو خودش تشخیص میده.<br> به مثال زیر توجه کنید: <pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"ChangeLink\", \"AUTH\")\n bot.changeLink(\"CHAT_ID\")</code></pre> خب همونطور که معلومه در خط اول کتابخونه رو ایمپورت کردیم و در خط دوم از کلاس Bot یک instance ساختیم و در خط سوم از تابع changeLink موجود در متغییر bot استفاده کردیم که باید بهش شناسهٔ چت مربوط به گروه یا کانال خصوصی‌ای که میخوایم لینکش عوض بشه رو بدیم. ضمنا اکانتی که شناسه‌اش در خط دوم وارد شده باید در کانال خصوصی یا گروهی که شناسه‌اش در خط سوم وارد شده ادمین باشه و دسترسی های لازم رو داشته باشه.",
            "شرایط ایجاب میکنه که برای امنیت اکانت و ایجاد کانال اکانتمون رمزعبور دومرحله‌ای داشته باشه؛ به همین خاطر هم این قابلیت به کتابخونه اضافه شد.<br> برای استفاده از این قابلیت به کد زیر توجه کنید: <pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"ChangePassword\", \"AUTH\")\n bot.changePassword(\"HINT\", \"NEW\", \"OLD\")</code></pre> در خط دوم بجای AUTH شناسه اکانت و در خط سوم بجای HINT راهنمای رمزعبور، بجای NEW رمزعبور جدید و بجای OLD رمزعبور قدیمی اکانتمون رو وارد می‌کنیم. به همین راحتی :)",
            "حالا که رمزعبور روی اکانتمون گذاشتیم ممکنه لازم داشته باشیم که بررسی کنیم رمزعبورمون رو هنوز یادمونه یا نه!<br> به این کد توجه کنید: <pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"CheckPassword\", \"AUTH\")\n bot.checkPassword(\"PASSWORD\")</code></pre> حالا کافیه بجای AUTH شناسه اکانت و بجای PASSWORD رمزعبورتون رو جهت بررسی قرار بدین. خروجی خط سوم یک bool خواهد بود که در صورت تطبیق رمزعبور وارد شده با رمزعبوری که از قبل تنظیم شده True و در غیر این صورت False برمیگردونه.",
            "اگه بخواین یک پوشه رو حذف کنین کافیه طبق این دستورالعمل پیش برین.<br> خب وقتی که از متد <a href=\"/docs.html?v=6.0.0&doc=addFolder\">addFolder</a> استفاده میکنین در خروجی اطلاعات مختلفی بهتون ارائه میده درمورد پوشه‌ای که ساختید، یکی از این اطلاعات folder_id هست که برای حذف پوشه نیاز به این مورد داریم. حالا به این مثال توجه کنید: <pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"DeleteFolder\", \"AUTH\")\n bot.deleteFolder(\"FOLDER_ID\")</code></pre> پیش‌نیاز های لازم رو انجام میدیم و سپس کافیه بجای FOLDER_ID در خط سوم ، آیدی پوشه‌ای که درموردش پیشتر صحبت کردیم رو جایگزین کنین و تمام! :)",
            "ممکنه نیاز پیدا بکنیم به اینکه بتونیم چت‌روم یک کاربر رو از لیست چت‌روم هامون حذف کنیم. نسخه جدید این نیاز رو برآورده کرده!<br>کد زیر رو مطالعه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"DeleteUserChat\", \"AUTH\")\n bot.deleteUserChat(\"UserID\")</code></pre><br>خب اگه به خط سوم توجه کنین می‌بینین که از متد deleteUserChat استفاده کردیم که نیاز به یک پارامتر داره و اون هم شناسهٔ چت کاربری هست که لازمه چت‌رومش برامون پاک بشه. به همین سادگی :)",
            "حالا اگه بخوایم رمزعبور دومرحله ای اکانتمون رو غیرفعال کنیم کافیه طبق مراحل زیر عمل کنیم.<br>اول به کد زیر توجه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"DisablePassword\", \"AUTH\")\n bot.disablePassword(\"PASSWORD\")</code></pre><br>درنهایت در خط دوم شناسه اکانت رو بجای AUTH و در خط سوم رمزعبورمون رو بجای PASSWORD می‌گذاریم تا رمزعبور غیرفعال بشه.",
            "<br>برای ویرایش نام و محتویات یک پوشه باید طبق این آموزش عمل کنیم.<br>ابتدا به کد زیر توجه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"EditFolder\", \"AUTH\")\n bot.editFolder(folder_id=\"FOLDER_ID\", name=\"NEW_NAME\")</code></pre><br>همه چیز مشخصه، فقط کافیه folder_id رو وقتی که پوشه رو می‌سازیم داشته باشیم و اون رو بجای FOLDER_ID در کد بالا جایگذاری کنیم و بجای NEW_NAME اسم جدید پوشه رو بگذاریم که البته این مقدار اختیاریه. البته مقادیر اختیاری دیگری هم هستن (include_chat_types, exclude_chat_types, include_object_guids, exclude_object_guids ) که توضیحاتشون در بخش <a href=\"/docs.html?v=6.0.0&doc=addFolder\">addFolder</a> ارائه شد.",
            "پس از لاگین توسط کتابخونه یک فایل ساخته میشه که به نام پارامتر اول موجود در instance ساخته شده از کلاس Bot هست یا همون appName و به فرمت json. داخل این فایل اطلاعات مختلفی از قبیل auth, first_name, last_name, bio و ... قرار میگیره که از طریق متد getMe قابل دسترسی هست. البته این متد فقط وقتی کار می‌کنه که پیشتر چنین فایلی موجود باشه.<br>به کد زیر توجه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetMe\")\n print(bot.getMe())</code></pre><br>درنتیجه ابتدا وارد اکانت خودتون میشین (اول شماره رو به این شکل : 09XXXXXXXXX (۱۱ کاراکتر) وارد میکنین و بعد صبر میکنین تا کد فعالسازی از سمت روبیکا براتون ارسال بشه) و سپس متد getMe سعی میکنه از فایلی به نام GetMe (تعیین شده در خط دوم) اطلاعات رو بخونه و اون رو چاپ بکنه.<br>البته برای ورود به اکانت لازمه اکانتتون سالم باشه (یعنی محدود و فیلتر نشده باشه و هنگام ورود نیاز به رمزعبور دومرحله ای نداشته باشه).<br>به این شیوه دیگه نیاز نیست AUTH اکانتتون رو دستی در بیارین و البته موقع deploy کردن ربات واجبه که فایل json ساخته شده توسط ربات رو همراه باهاش به هاست منتقل کنین تا لازم نباشه اونجا لاگین بکنین؛ با وجود این فایل در مراتب بعدی خودتون هم نیاز نیست مجددا لاگین بکنین :)",
            "با این متد کاربردی میتونید لیست سیاه یک گروه یا کانال رو دریافت کنین.<br>به این کد توجه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetBlacklist\", \"AUTH\")\n bot.getBlacklist(\"ChatID\")</code></pre><br>از متد getBlacklist استفاده کردیم و بهش شناسهٔ گروه یا کانالی که مدنظرمون هست رو میدیم.<br>اما اگر این متد رو برای دریافت یک لیست سیاه طولانی (مثلا بالای ۴۰ یا ۵۰ عضو) استفاده بکنیم باز هم به خوبی کار میکنه؟<br>جواب این سؤال منفیه!<br>روبیکا لیست سیاه رو بخش بخش به ما میده و برای دریافت پارت [های] بعدی ، یک پارامتر دیگه به نام start_id رو به متدمون بدیم که مساوی هست با آخرین مقدار داده شده توسط درخواست قبلی .<br>اگه متوجه نشدین به کد زیر توجه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetBlacklist\", \"AUTH\")\n blacklist = bot.getBlacklist(\"ChatID\")\n while blacklist.get(\"has_continue\"):\n blacklist = bot.getBlacklist(\"ChatID\", start_id=blacklist.get(\"next_start_id\"))</code></pre><br><br>حالا با توجه به این کد و مطالعه توضیحات و مقایسه با کد قبلی میتونید متوجه بشید که چطور میشه کل لیست سیاه رو دریافت کرد! :)",
            "با این متد کاربردی میتونید لیست افرادی رو که ربات بلاک کرده رو دریافت کنین.<br>به این کد توجه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetMyBlacklist\", \"AUTH\")\n bot.getMyBlacklist()</code></pre><br>از متد getMyBlacklist استفاده کردیم و از اونجا که مربوط به خودمون هست نه یک گروه و کانال ، بهش پارامتری رو اختصاص نمیدیم.<br>البته به این متد هم میشه در صورت لزوم پارامتر start_id رو اختصاص داد که در آموزش قبلی نحوه کارش آموزش داده شد.",
            "<br>البته این متد در نسخه قبلی هم وجود داشته اما کاربردش مختصر به گروه میشده و به همین خاطر هم قبلا اسمش getGroupAdmins بوده و با پیشرفت کتابخونه و قابلیت تشخیص نوع چت که در کتابخونه قرار داده شده ، کاربرد این متد ، کانال ها رو هم شامل میشه و به همین خاطر هم اسمش به getAdmins عوض شده.<br>به این کد توجه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetAdmins\", \"AUTH\")\n bot.getAdmins(\"ChatID\")</code></pre><br>از متد getAdmins استفاده کردیم و باید به تنها پارامتر اجباری که داره ، شناسهٔ چت گروه یا کانال موردنظرمون برای گرفتن ادمین هاش رو بدیم.<br>ضمنا در این آموزش و هر آموزشی که مثل این مورد یک لیست رو از روبیکا بگیره (مثلا دریافت اعضا، دریافت رأی‌دهنده های یک نظرسنجی و ... ) میتونید از پارامتر اختیاری start_id استفاده کنید که طرز استفاده ازش در آموزش <a href=\"/docs.html?v=6.0.0&doc=getBlacklist\">getBlacklist</a> گفته شد.<br>ضمنا این مورد برای اجرا نیاز داره به اینکه ربات در گروه یا کانال موردنظر ادمین باشه و دسترسی های لازم رو هم داشته باشه.",
            "<br>این متد کاربردی بهتون کمک میکنه که بتونین گفتگو هایی که در اکانت ربات وجود داره رو به دست بیارین. (شامل گروه هایی که عضو شده، کانال ها، کاربرانی که باهاشون چت کرده و ...)<br>به این مثال توجه بکنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetChats\", \"AUTH\")\n print(bot.getChats())</code></pre><br>خب همونطور که معلومه از متد getChats استفاده کردیم و خروجیش رو چاپ کردیم البته این متد پارامتر اجباری نداره ولی میتونید start_id که پیشتر آموزش استفاده ازش داده شد رو در این متد به کار ببرید تا کل چت ها رو دریافت کنید.",
            "این متد هم مثل خیلی از متد های دیگه در ورژن های قبل وجود داشته اما قبلا دو متد مجزا به نام های ‌getGroupMembers و getChannelMembers داشتیم که اولی اعضای گروه و دومی اعضای کانال رو دریافت می‌کرد. اما الان هردو ادغام شدن و به getMembers تغییر عنوان پیدا کردن.<br>پس برای اینکه بدونیم چطور میشه از این متد استفاده کرد، ابتدا این کد رو مورد توجه قرار بدین:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetMembers\", \"AUTH\")\n print(bot.getMembers(\"ChatID\"))</code></pre><br>در خط سوم حاصل متد getMembers رو چاپ کردیم که این متد طبق پارامتر های زیر پُر میشه:<br><ul dir=\"rtl\"><br><li>chat_id : شناسهٔ گروه یا کانالی که ربات داخلش ادمینه و دسترسی دیدن اعضا رو داره [در کانال] . (اجباری)</li><br><li>search_text : متنی که توی اعضای گروه یا کانال موردنظر میخواین جستجو کنین که میتونه نام کاربر باشه یا نام کاربریش. (اختیاری)</li><br><li>start_id : مقدار حاصل از درخواست قبلی جهت دریافت ادامهٔ لیست (اختیاری)</li><br></ul><br>ضمنا همه پارامتر ها به صورت رشته (String) باید وارد بشن .",
            "این متد در ورژن قبلی به شکل مجزا و به نام های getUserInfo و getGroupInfo وجود داشت که همونطور که از اسم این متد ها معلومه، فقط برای دریافت اطلاعات گروه‌ها و کاربران کاربرد داشته؛ اما حالا اون متد ها یکی شده به نام getInfo که میشه با استفاده ازش اطلاعات کاربران/گروه‌ها/کانال‌ها/ربات‌ها و سرویس‌ها رو براساس شناسهٔ چتشون دریافت کرد.<br>به این مثال دقت کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetInfo\", \"AUTH\")\n print(bot.getInfo(\"ChatID\"))</code></pre><br>در خط سوم و پس از اعمال پیش‌نیاز ها از متد موردنظر استفاده کردیم. این متد فقط و فقط نیاز به یک پارامتر داره و اون هم شناسهٔ چت موردنظر هست که برای کاربران با u ، برای گروه ها با g ، برای کانال ها با c ، برای ربات ها با b و برای سرویس ها با s شروع میشه و همگی دارای ۳۲ کاراکتر شامل اعداد لاتین (9-0) و حروف انگلیسی (a-z) هستن. این شناسه ها رو میشه از طریق متد های گوناگون از جمله <a href=\"/docs.html?v=5.2.3&doc=getInfoByUsername\">getInfoByUsername</a> (برای کاربران/ربات‌ها/کانال‌های‌عمومی) و <a href=\"/docs.html?v=6.0.0&doc=getPreviewByJoinLink\">getPreviewByJoinLink</a> (گروه‌ها/کانال‌های‌خصوصی) دریافت کرد.",
            "این متد هم در نسخه قبلی به نام getGroupLink وجود داشت و فقط برای گرفتن لینک گروه ها کاربرد داشت اما در این نسخه تبدیل به getLink شده که باهاش میشه لینک کانال های خصوصی رو هم دریافت کرد.<br>به این کد توجه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetLink\", \"AUTH\")\n print(bot.getLink(\"ChatID\"))</code></pre><br>خب حتما تاحالا متوجه شدید که کل کار ما با خط سوم به بعده. اینجا هم در خط سوم ما از متد getLink استفاده کردیم و بهش باید شناسهٔ چت گروه یا کانال خصوصی مورد نظرمون که بات داخلش ادمینه و دسترسی های موردنیاز رو داره، بعد هم خروجیش رو پرینت کردیم. و تمام :)",
            "درواقع این متد در نسخه قبل به نام groupPreviewByJoinLink موجود بوده که همونطور که از اسمش پیداست فقط اطلاعات گروه رو از طریق لینکش میتونسته دریافت کنه، درحالی که برای دریافت اطلاعات کانال های خصوصی هیچ متدی در کتابخونه ارائه نشده بود، پس اون متد رو حذف کردیم و بجاش یک متد ساختیم به نام getPreviewByJoinLink که هم برای گروه و هم برای کانال کاربرد داره.<br>این متد مثل نمونه زیر کار میکنه:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetPreviewByJoinLink\", \"AUTH\")\n print(bot.getPreviewByJoinLink(\"ChatLink\"))</code></pre><br>خب در خط سوم ما از متغیر bot که یک instance از کلاس Bot هست که در خط اول ایمپورت شده و در خط دوم تعریف شده، تابع getPreviewByJoinLink استفاده کردیم و باید بهش یک پارامتر از نوع رشته (String) رو بدیم که حاوی لینک دعوت گروه/کانال موردنظرمون هست، لینک دعوت گروه شامل عبارت joing و لینک دعوت کانال شامل عبارت joinc هست.",
            "بااستفاده از این آموزش میتونین وضعیت نظرسنجی رو دریافت کنین که شامل باز بودن نظرسنجی، عنوانش، تعداد آراء، نوع نظرسنجی و ... میشه.<br>به نمونه زیر توجه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetPollStatus\", \"AUTH\")\n print(bot.getPollStatus(\"PollID\"))</code></pre><br>این متد فقط به یک پارامتر نیاز داره که اون هم شناسهٔ نظرسنجی (Poll ID) هست که از طریق متد هایی مثل getMessages به دست میاد.",
            "در آموزش جای خالی یک قابلیت مهم احساس میشد که اون هم دریافت لیست کسانی هست که در نظرسنجی شرکت کردن. در این آموزش بهش می‌پردازیم.<br>به کد زیر توجه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetPollOptionVoters\", \"AUTH\")\n print(bot.getPollOptionVoters(\"poll_id\", 0))</code></pre><br>پارامتر اول آیدی نظرسنجی موردنظر هست و پارامتر دوم ایندکس گزینه موردنظر (چندمین مورد هست منهای یک).",
            "پست هایی که داخل کانال های عمومی ارسال میشن بهشون لینکی اختصاص میگیره که از طریق اون میشه اطلاعات پست رو بااستفاده از همین متد دریافت کرد.<br>خب پس برای یادگیری نحوه استفاده از این متد کاربردی ابتدا به این مثال با دقت نگاه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetPostByLink\", \"AUTH\")\n print(bot.getPostByLink(\"https://rubika.ir/ChannelID/POST_LINK\"))</code></pre><br>خب همونطور که در کد بالا می‌بینید ، متد getPostByLink تنها یک پارامتر داره و اون هم لینک پست هست که با لمس دکمه <i class=\"fas fa-forward\"></i> در سمت راست پست موردنظر در کانال و سپس لمس دکمه «کپی لینک» میشه اون رو به دست آورد.",
            "در روبیکا وقتی پروفایل یک کاربر رو باز میکنیم این قابلیت وجود داره که گروه های مشترکی که با اون کاربر داریم رو هم پیدا کنیم؛ و اون قابلیت از طریق همین متد انجام میشه.<br>پس برای دنبال کردن این آموزش ابتدا به این مثال دقت کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetCommonGroups\", \"AUTH\")\n print(bot.getUserCommonGroups(\"CHAT_ID\"))</code></pre><br>کافیه پس از انجام پیش‌نیاز ها، بجای CHAT_ID ، شناسهٔ چت کاربر موردنظر رو وارد کنید و تمام :)",
            "بااستفاده از این متد میتونین وضعیت رمزعبور دومرحله‌ای رو بسنجید که شامل اطلاعات پایه‌ای میشه از قبیل اینکه ایمیل ثبت شده یا نه و ...<br>خب اول این کد رو ببینید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetPassStatus\", \"AUTH\")\n print(bot.getTwoPasscodeStatus())</code></pre><br>و سپس نتیجه چاپ میشه و شامل مواردی هست که بالاتر گفته شد.",
            "بااستفاده از این متد میتونید تنظیمات حریم‌خصوصی اعم از تعداد کاربران مسدود شده، تعداد نشست های فعال، و... رو دریافت کنید.<br>ابتدا به این کد دقت کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetPrivacy\", \"AUTH\")\n print(bot.getPrivacySetting())</code></pre><br>به همین سادگی میتونید اطلاعات حریم‌خصوصیتون رو دریافت کنید :)",
            "با این متد میتونید بفهمید کدوم اعلانات رو تنظیم کردید که نمایش داده بشن.<br>به این کد توجه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetNotifSetting\", \"AUTH\")\n print(bot.getNotificationSetting())</code></pre><br>و خروجی شامل اینکه کدوم اعلانات نمایش داده میشن چاپ میشه.",
            "این متد میتونه بهتون کمک کنه پوشه هایی که دارید رو همراه با محتویاتشون دریافت کنید.<br>ابتدا به این کد توجه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetFolders\", \"AUTH\")\n print(bot.getFolders())</code></pre><br>و خروجی حاوی یک لیست هست که به تعداد پوشه هاتون دیکشنری داره و در هر دیکشنری اطلاعات مربوط به یکی از پوشه‌ها هست.",
            "بااستفاده از این متد میتونید پس از اینکه مالکیت کانال یا گروهی رو منتقل کردید به اکانت ربات که شناسه‌اش رو در ادامه وارد می‌کنید ، با این متد مالکیت اون کانال یا گروه رو دریافت بکنید.<br>کد زیر رو مطالعه کنید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"GetOwning\", \"AUTH\")\n bot.getOwning(\"CHAT_ID\")</code></pre><br>تقریبا تمومه، فقط کافیه در خط سوم شناسهٔ گروه یا کانال موردنظر رو بجای CHAT_ID وارد کنید؛ همین :)",
            "در همه گروه های روبیکا بالای چت‌روم رو اگر نگاه کنیم تعداد اعضای آنلاین رو هم نوشته، حالا اگه بخوایم اون مقدار رو با ربات به دست بیاریم باید طبق این آموزش عمل کنیم.<br>ابتدا این کد رو ببینید:<br><pre><code class=\"language-python\">from rubika.client import Bot\n bot = Bot(\"getGroupOnlineMembersCount\", \"AUTH\")\n count = bot.getGroupOnlineMembersCount(\"ChatID\")\n print(count)</code></pre><br>در خط سوم ، متغیر count رو برابر با مقدار حاصل از فراخوانی متد getGroupOnlineMembersCount و در خط بعد چاپش کردیم. تنها کاری که درمورد کد بالا لازمه انجام بدیم اینه که علاوه بر جایگذاری AUTH در خط دوم با شناسه اکانت رباتمون، ChatID در خط سوم رو هم برابر با شناسه گروه موردنظرمون قرار بدیم و تمام :)",
            "از جمله گزینه های موجود در تنظیمات حریم‌خصوصی اینه که میشه نشست های فعال رو دریافت کرد. با این متد میخوایم این کار رو انجام بدیم.<br>پس به کد زیر دقت کنید:<br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"getSessions\", \"AUTH\")\n sessions = bot.getMySessions()\n print(sessions)</code></pre><br>حالا کافیه شناسه اکانتتون رو جایگزین AUTH در خط دوم بکنید، بعد کد رو اجرا کنید تا نشست های فعال اکانتتون رو دریافت بکنید.",
            "بااستفاده از این متد قادرید لیست مخاطبینی که در روبیکا ذخیره کردید رو دریافت بکنید.<br>اول این مثال رو نگاه کنین:<br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"GetContacts\", \"AUTH\")\n print( bot.getContacts() )</code></pre><br>حالا بجای AUTH شناسه اکانتتون رو بگذارید و کد رو اجرا کنید، داخل خروجی یک لیست خواهد بود که شامل دیکشنری هایی به تعداد مخاطبینتون هست که داخل هرکدوم اطلاعات یکی از اونها وجود داره :)",
            "خب این متد یکم تغییر کرده و اون هم اینکه همین متد این قابلیت رو داره که هم برای افزودن عضو به گروه و هم برای افزودن عضو به کانال به کار میاد.<br>ابتدا به این کد توجه کنید:<br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"Invite\", \"AUTH\")\n bot.invite(\"ChatID\", [\"UserID1\", \"UserID2\", \"UserID...\"]</code></pre><br>خب همون‌طور که مشخصه بعد از اینکه شناسه اکانتمون رو بجای AUTH گذاشتیم، کافیه شناسهٔ چت کانال یا گروه موردنظرمون که باید اعضا بهش اضافه بشن رو بجای ChatID بگذاریم سپس داخل پارامتر دوم که یک لیست هست، شناسهٔ چت کاربرایی رو باید بگذاریم که لازمه ربات اونها رو به جایی که شناسهٔ چتش رو در پارامتر اول وارد کردیم ، اضافه بکنه.<br>در نهایت دو تا نکته رو باید بگم ، اول اینکه ربات باید در کانال یا گروه موردنظرمون عضو باشه، ادمین باشه و دسترسی های لازم رو داشته باشه. نکته دوم هم اینکه کاربران موردنظر جهت add کردن باید دسترسی «پیوستن به کانال‌ها و گروه‌ها» رو در «تنظیمات > حریم‌خصوصی و امنیت» روی همه گذاشته باشن و همچنین قبلا گروه یا کانال موردنظر رو ترک نکرده باشن، وگرنه نمیشه اونها رو به کانال یا گروه موردنظر بااستفاده از این متد add کرد.",
            "این متد هم از تغییرات اخیر کتابخونه بی‌نصیب نمونده و حالا میتونین بااستفاده از این متد در کانال یا گروه موردنظر عضو بشین و این خود متد هست که تشخیص میده جایی که باید عضو بشه کجاست و باید برای عضویت از کدوم متد استفاده بکنه ؛)<br>پس به کد زیر توجه کنید:<br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"Join\", \"AUTH\")\n bot.join(\"ChatDetector\")</code></pre><br>خب این مورد نیاز داره یکم بیشتر دقت بکنید، ما در آموزش های قبلی ، وقتی می‌خواستیم بگیم که در قسمتی از کد باید لینک مربوط به چت رو وارد کنید از عبارت ChatLink استفاده میکردیم.<br>وقتی هم می‌خواستیم بگیم که در قسمتی از کد باید شناسهٔ چت رو وارد کنید از عبارت ChatID استفاده می‌کردیم.<br><br>اما اینجا از ChatDetector استفاده کردیم! خب این یعنی چی؟<br>یعنی از اونجا که این متد هم میتونه شما رو در گروه‌ها عضو بکنه (از طریق لینک عضویت (ChatLink)) و هم در کانال‌ها (از طریق شناسهٔ‌چت (ChatID)) پس باتوجه به نیازتون باید مقدار موردنظر رو بجای ChatDetector بگذارید.<br>خلاصه‌اش میشه اینکه اگه میخواین در گروه عضو بشین باید بجای ChatDetector لینک عضویت رو بگذارید و اگه میخواین در کانال عضو بشین باید بجای اون ، شناسهٔ‌چت اون کانال رو بگذارید.<br>ضمنا اگر از اون کانال یا گروه ریمو شده باشید نمیتونید از این متد استفاده کنید.",
            "خب این متد هم طبیعتا در نسخه های قبلی موجود بود اما در این نسخه مثل متد <a href=\"/docs.html?v=6.0.0&doc=join\">join</a> این قابلیت رو کسب کرده که بتونه به شما هم درمورد گروه‌ها و هم درمورد کانال ها کمک بکنه.<br>پس به کد زیر توجه کنید:<br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"Leave\", \"AUTH\")\n bot.leave(\"ChatID\")</code></pre><br>اما تفاوتی که این متد با متد join داره اینه که متد leave نیاز به ChatID داره و هم برای ترک کانال‌ها و هم برای ترک گروه‌ها لازمه که شناسهٔ‌چتشون رو جایگزین ChatID بکنید. موفق باشید :)",
            "خب همون‌طور که میدونید با متد <a href=\"/docs.html?v=5.3.4&doc=editProfile\">editProfile</a> میشه اطلاعات پروفایل خودمون از جمله بیوگرافی، نام و... رو ویرایش کرد اما برای تغییر اطلاعات گروه یا کانال باید از این متد استفاده کرد.<br>ابتدا به این کد توجه کنید:<br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"EditChatInfo\", \"AUTH\")\n bot.editChatInfo(\"ChatID\", title=\"TITLE\", description=\"DESCRIPTION\")</code></pre><br>به این نحو و با جایگذاری شناسهٔ‌چت مربوط به کانال یا گروه بجای ChatID و جایگذاری عنوان جدید بجای TITLE و توضیحات جدید بجای description، میتونید عنوان و توضیحات کانال یا گروه موردنظر رو تغییر بدید.<br>همه پارامتر ها پارامتر اول (ChatID) اختیاری هستن و میشه اونها رو حذف کرد یا پارامتر ها بیشتری (از جمله username برای کانال‌های‌عمومی و...) رو اضافه کرد.",
            "با این آموزش میتونین اعلانات چت یک گروه، کانال، کاربر و... رو بی‌صدا بکنین.<br>ابتدا به این کد توجه کنید:<br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"MuteChat\", \"AUTH\")\n bot.muteChat(\"ChatID\")</code></pre><br>در نهایت کافیه بجای ChatID شناسهٔ چت موردنظر رو وارد بکنید تا اعلانات چت‌روم موردنظر بی‌صدا بشه.",
            "اگه محتوای مجرمانه‌ای رو بخواین گزارش بکنین این متد به دردتون میخوره. البته امیدوارم سوءبرداشت نشه، پس لازمه همین اول بدونید که این متد نه کسی که جرمی نکرده رو میتونه فیلتر بکنه نه هر حرف بی‌پایه و اساس دیگه‌ای که ممکنه بعد ها درمورد این متد گفته بشه...<br>گذشته از اینها، بریم که آموزش رو شروع کنیم. پس به کد زیر توجه کنید:<br><pre><code class=\"language-python\">from rubika import Bot\n from rubika.configs import reports\n \n bot = Bot(\"ReportChat\", \"AUTH\")\n \n bot.reportChat(\"ChatID\", reportType=reports.OTHER, description=\"something\")</code></pre><br>خب در خط اول کلاس Bot رو از کتابخونه ایمپورت کردیم.<br>در خط دوم از بخش configs در کتابخونه (که شامل برخی موارد پایه میشه) کلاس reports رو ایمپورت کردیم (کلاس reports شامل انواع گزارشات هست که در پارامتر دوم متد bot.reportChat مورد استفاده قرار میگیره).<br>در خط بعدی از کلاس Bot یک instance به نام bot ساختیم که پارامتر اول نام‌پروژه هست و پارامتر دوم شناسهٔ ۳۲ کاراکتریِ اکانت باید قرار بگیره بجای AUTH.<br>و در خط آخر از متغییر bot که در خط قبل تعریف کرده بودیم، تابع reportChat رو مورد استفاده قرار میدیم.<br>به این تابع سه پارامتر تعلق میگیره که پارامتر اول شناسهٔ چت هست، پارامتر دوم نوع گزارش هست که از نوع عدد صحیح (int) هست و در آخر این آموزش بیشتر بهش می‌پردازیم، و پارامتر سوم توضیحات بیشتر هست [که در صورتی که پارامتر دوم برابر reports.OTHER قرار بگیره الزامی هست که این پارامتر هم مقداری از نوع رشته (String) رو برای خودش داشته باشه].<br><br><b>انواع گزارشات</b><br><li>سایر : reports.OTHER</li><li>خشونت : reports.VIOLENCE</li><li>هرزنامه : reports.SPAM</li><li>مستهجن : reports.PORNOGRAPHY</li><li>کودک‌آزاری : reports.CHILD_ABUSE</li><li>نقض کپی‌رایت : reports.COPYRIGHT</li><li>کلاهبرداری : reports.FISHING</li><br>تمامی مقادیر از نوع عدد صحیح (int) و به ترتیب از بالا به پایین مساوی ۱۰۰ الی ۱۰۶ هستن.",
            "این متد در حذف کردن گروه‌ها و کانال‌هایی که به شما تعلق دارن میتونه بهتون کمک بکنه.<br>پس به کد زیر توجه کنید:<br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"RemoveChat\", \"AUTH\")\n bot.removeChat(\"ChatID\")</code></pre><br>حالا کافیه بجای AUTH شناسه‌ی اکانت و بجای ChatID شناسه‌ی چت (گروه/کانال) متعلق به خودتون رو وارد بکنید.<br>دقت کنید که برای حذف کانال یا گروه الزامی هست که مالکیت اون کانال یا گروه با شما باشه و از ورود نشست فعلی ۷۲ ساعت (۳ شبانه‌روز) گذشته باشه.",
            "نظر به اینکه در نسخه جدید فایل shad در کتابخونه حذف شد تا علاوه بر کاهش حجم کتابخونه، به روند توسعه سرعت داده بشه.<br>اما ساخت بات برای پیام‌رسان شاد هنوز هم با کتابخونه امکان‌پذیر هست اما به این شکل:<br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"SetAsShad\", \"AUTH\")\n bot.setAsShad()\n # other codes ...</code></pre><br>درنهایت کافیه بجای AUTH بایستی شناسهٔ اکانت شادتون رو وارد کنید و پس از خط سوم سایر کد هایی که لازم دارید رو وارد بکنید.",
            "شاید تعجب بکنید که متد ارسال پیام چه تغییری با نسخه های قبلی کرده و شاید هم فکر کنید نحوه استفاده از این متد تغییر کرده. اما اینطور نیست فقط یک قابلیت جدید به متد های ارسال پیام (متد هایی که با send شروع میشن شامل sendMessage, sendPhoto, sendDocument و ...) اضافه شده. اون هم اینکه قابلیت منشن کردن اعضا در گروه فراهم شده.<br>به همین بهونه در این مقاله یک بار دیگه نحوه استفاده از metadata آموزش داده میشه :)<br><br><b>بولد (Bold) کردن</b><br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"Bold\", \"AUTH\")\n bot.sendMessage(\"ChatID\", \"it is Bold\", parse_mode=\"markdown\")</code></pre><br><br><b>ایتالیک (Italic) کردن</b><br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"Italic\", \"AUTH\")\n bot.sendMessage(\"ChatID\", \"it is Italic\", parse_mode=\"markdown\")</code></pre><br><br><b>مونو (Mono) کردن</b><br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"Bold\", \"AUTH\")\n bot.sendMessage(\"ChatID\", \"it is Mono\", parse_mode=\"markdown\")</code></pre><br><br><b>منشن (Mention) کردن</b><br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"Bold\", \"AUTH\")\n bot.sendMessage(\"ChatID\", \"it is [uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA](MentionedUser)\", parse_mode=\"markdown\")</code></pre><br><br><hr><br><br>اما بپردازیم به توضیحات،<br>خب در تمامی موارد خط اول مربوط به ایمپورت کردن کلاس Bot بود و خط دوم ساختن Instance از اون که در این خط لازمه شناسه اکانتمون رو جایگزین AUTH بکنیم.<br>اما در خط سوم از تابع sendMessage استفاده کردیم که به این تابع در پارامتر اول شناسهٔ چت موردنظر جهت ارسال پیام رو وارد کردیم، در پارامتر دوم متن پیاممون رو وارد کردیم و در پارامتر سوم نوع تجزیهٔ متادیتا رو مشخص کردیم.<br><br>خب نوع تجزیهٔ متادیتا چیه؟<br>اول باید بدونیم متادیتا چیه، متادیتا درواقع چیزی هست که مشخص میکنه کجای متن ما باید Bold باشه، کجاش Italic، کجاش Mono و کجاش Mention باشه.<br>پس فهمیدیم متا دیتا چی هست، اما اگه بخوایم خودمون متادیتا رو وارد بکنیم خیلی زمان‌بر هست پس باید از ابزاری استفاده بکنیم که خودش بتونه متن ما که در پارامتر دوم sendMessage وارد میشه رو تجزیه کنه و از دل این متن، متادیتا رو بیرون بکشه؛ مثلا متنی که میخوایم بولد بشه رو وسط چهار تا ستاره (*) قرار میدیم، پس این نماد بولد هست و به parser کمک میکنه براساس همین نماد ها متا دیتا رو بسازه. حالا از اونجا که این تجزیه معیار داره و اون معیار انواع داره، بنابراین ما در پارامتر سوم sendMessage که اسمش parse_mode هست مشخص می‌کنیم که معیارمون از چه نوعی هست.<br>درواقع معیار همون چیزیه که میگه نماد های موجود در متن بر چه اساس هستن و parser باید کدوم کاراکتر ها رو به عنوان نماد بشناسه و براساس اونها meta data رو بسازه.<br>حالا چند نوع معیار داریم و چیا هستن؟<br>در واقع دو نوع معیار داریم که اولی HTML هست و دومی markdown. هردوی اینها برای موارد مورد نیاز ما نماد های مخصوصی دارند که ما از این نماد ها در متن خودمون استفاده می‌کنیم، در مثال های بالا از نماد های markdown استفاده کردیم و برای یادگیری نماد های HTML بهتره که این زبان رو یاد بگیرید.<br><br>حالا همه نمادها ، معیارها و پارامتر ها برای ما معلوم هستن و میتونیم به عقب برگردیم و مثال ها رو دوباره مطالعه کنیم؛ اما تنها یک سؤال باقی میمونه و اون هم اینکه در مثال آخر که درمورد Mention کردن هست منظور از نمادی که در متن (پارامتر دوم sendMessage) نوشتیم چی هست؟<br>درواقع ما میتونیم اون نماد رو به دو قسمت تقسیم کنیم.. قسمت اول براکت‌ها «[» و «]» هستن و قسمت دوم پرانتزها «(» و «)». در براکت‌ها باید شناسهٔ چت کاربر موردنظر جهت منشن شدن رو وارد کنیم بجای uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA و متنی که میخوایم وقتی لمسش کردیم منتقل بشیم به چت‌روم کاربر موردنظر رو لا به لای پرانتزها بگذاریم بجای MentionedText.<br>درنهایت نکته‌ای که شایان ذکر هست اینه که منشن کردن فقط داخل گروه ها کار میکنه در حالی که سایر meta data ها در هر گفتگویی عمل میکنن.",
            "بااستفاده از این متد میتونید ویدیو هاتون رو ارسال بکنین. برای استفاده از این متد باید کتابخونه tinytag رو بااستفاده از دستور زیر نصب کنید:<pre><code class=\"language-bash\">pip install tinytag</code></pre><br>سپس بدون اتلاف وقت میریم سراغ کد:<br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"SendVideo\", \"AUTH\")\n bot.sendVideo(\"ChatID\", \"./video.mp4\", caption=\"Hey There! this is my video.\")</code></pre><br>خب طبق معمول خط اول و دوم که میدونیم چیه و میریم سراغ خط سوم.<br>در خط سوم از تابع sendVideo استفاده کردیم، این تابع دارای ۲ پارامتر اول اجباری و سایر ۷ پارامتر اختیاری هست.<br><li> پارامتر اول : شناسهٔ چت موردنظر جهت ارسال ویدیو</li><br><li> پارامتر دوم : مسیر کامل فایل که میتونه لینک مستقیم ویدیو باشه یا مسیر فایل در دستگاه</li><br><li> پارامتر سوم : کپشن ویدیو هست که برای تنظیمش باید پیش از تعریف اون عبارت =caption رو وارد کنید.</li><br><li> پارامتر چهارم : معیار تجزیهٔ متادیتا که در آموزش <a href=\"/docs.html?v=6.0.0&doc=sendMessage\">ارسال پیام</a> توضیح داده شد. این پارامتر برای تعریف باید پیش از مقدار حاوی عبارت =parse_mode باشه.</li><br><li> پارامتر پنجم و ششم : عرض و طول ویدیو ه‍ست که در حالت عادی هردو برابر 720 هستن و برای تعریف کردنشون باید مقادیر به ترتیب با عبارت های =width برای عرض و =height برای طول شروع بشن</li><br><li> پارامتر هفتم : شناسهٔ پیام جهت ریپلای کردن ویدیوی ارسالی روی پیام موردنظر هست که برای تعریف کردن این مقدار باید پیش از مقدار، عبارت =message_id نوشته بشه</li>",
            "این متد میتونه بهتون کمک بکنه تا یک فایل صوتی رو در قالب موسیقی به روبیکا ارسال بکنید تا قابل پخش در خود روبیکا باشه، در حالی که اگر با متد sendDocument ارسال کنید از طریق اپلیکیشن موسیقی در دستگاه مخاطب پخش خواهد شد.<br>این متد هم برای اجرا نیاز به کتابخونه tinytag داره که با وارد کردن این کد در command line خودتون میتونین اون کتابخونه رو نصب کنید:<br><pre><code class=\"language-bash\">pip install tinytag</code></pre><br><br>خب پس حالا میتونیم با خیال راحت بریم سراغ کد:<br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"SendMusic\", \"AUTH\")\n bot.sendMusic(\"ChatID\", \"./music.mp3\", caption=\"Happy Listening 🎧\")</code></pre><br>این متد هم دقیقا مانند متد ارسال ویدیو هست اما پارامتر های width و height رو نداره. امیدوارم مفید بوده باشه :)",
            "نه نه اشتباه نکنید! حتی این متد هم نمیتونه یک فایل با فرمت .gif رو داخل روبیکا ارسال بکنه طوری که پخش بشه.. اما این محدودیت روبیکاست و خب نمیشه کاریش کرد. پس این متد چکار می‌کنه؟ این متد میتونه یک ویدیو رو در قالب gif به روبیکا ارسال کنه و روبیکا با هر بار اتمام پخش این ویدیو دوباره پخش رو از ابتدا شروع میکنه ...<br>پس بریم تا یاد بگیریم :<br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"SendGIF\", \"AUTH\")\n bot.sendGIF(\"ChatID\", \"./video.mp4\", caption=\"There is something playing [non-stop] =D\")</code></pre><br>و خب این متد در پارامترها تقریبا تفاوتی با متد <a href=\"/docs.html?v=6.0.0&doc=sendVideo\">ارسال ویدیو</a> نداره.",
            "بااستفاده از این متد قادرید اطلاعات یک مخاطب رو با دیگران به اشتراک بگذارید. برای این امر نیاز دارید به اینکه شناسهٔ چت مخاطبتون رو علاوه بر نام و شماره‌تلفنش داشته باشید که دریافت تمام این موارد از طریق متد <a href=\"/docs.html?v=6.0.0&doc=getContacts\">دریافت مخاطبین</a> امکان پذیره.<br>پس بدون نگرانی میریم که کد بزنیم :<br><pre><code class=\"language-python\">from rubika import Bot\n bot = Bot(\"SendContact\", \"AUTH\")\n bot.sendContact(\"ChatID\", \"UserID\", \"09123456789\", \"MyContact\")</code></pre><br>خب همونطور که مشاهده می‌کنید، متد موردنظر ما نیازمند ۴ پارامتر اجباری هست .<br><li> پارامتر اول : شناسهٔ چتی هست که میخوایم اطلاعات مخاطبمون رو بهش ارسال کنیم </li><br><li> پارامتر دوم : شناسهٔ چت مخاطبی هست که قصد داریم اطلاعاتش رو ارسال بکنیم</li><br><li> پارامتر سوم : شماره تلفن مخاطب موردنظر هست که دارای ۱۱ کاراکتر هست و باید در قالب رشته (String) باشه</li><br><li> پارامتر چهارم : نام مخاطب موردنظر هست که میتونه به مقدار دلخواه وارد بشه</li><br><li> پارامتر پنجم : نام‌خانوادگی مخاطب موردنظر هست البته این پارامتر اختیاری هست</li>"
        ]
    }
}